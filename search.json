[{"title":"Base IT knowledge l1","url":"/2019/05/14/grow/base/Base-IT-knowledge-l1/","content":"\n## Clean Code\n\ncode authoring basics: coding and naming conventions\nimportant 'code smells'\nrefactoring basics\n\n## Computer science fundamentals\n\nData structures: stack, array, linked list, queue, bag\nBasic algorithms: elementary sort\nAlgorithms complexity basics\nMerge and quick sort\nHash tables; hash functions\nPriority queue/heap\nUnion-find structure and algorithm\n\n## Version control principles\n\nversion control fundamentals, centralized vs distributed\nsvn basic usage: checkout, update, commit, merge, conflict resolution\ngit basic usage: clone, branches, merging, push, pull\ngit comparison to svn\n\n## Automation concepts\n\ncommand-line scripting\npowershell scripting\nusing msbuild for buiding automation\nContinuous integration setup and usage (cruise control, teamcity)\noverview of other scripting platforms (python, node.js, csipts)\n\n## Computer science\n\nDivide-and-conquer algorithms generalization\nGraph data structure, BFS, DFS algorithms\nGreedy algorithms: Minimal spanning tree, shortest path\n\n## Computers and networks\n\nNetwork fundamentals, OSI model\ntransport level protocols: IP, TCP, configuration\npresentatin level protocols: https\napplication level protocols: http, ftp, smtp, dns\nusing utils: ping, nslookup, tracert, telnet, curl\n\n## Xml concepts\n\nXml overview\nXPath concepts\nXSD concepts\n\n## Advanced computer science\n\nstrings algorithms: sort, substring search, regular expressions, compression\ndynamic programming\nnonlinear programming\nmemory-management (garbage collection)\ndata indexing\n\n## Cryptography\n\ncryptography algorithms: symmetrical, asymmetrical\napplications: .net cryptolibrary, crypto++, else?\n\n## Trees\n\nbinary search trees\nbalanced search trees: b-tree, red-black-tree, avl","tags":["base","l1"]},{"title":"client side javascript l1","url":"/2019/05/14/grow/js/client-side-javascript-l1/","content":"\n## Events Handling\n\nEvent Phases\nKnow Event phases\nBe able to explain difference between capturing and bubbling\nEvent Listeners\nBe able to handle events\nBe able to create custom events\nBe able to trigger events (both built-in and custom)\n\n## AJAX\n\nXMLHttpRequest\nKnow HTTP protocol basics\nKnow AJAX concept\nKnow how XMLHttpRequest works\nUnderstand AJAX security policy\nBe able to explain difference between AJAX request and Form submit\nBe able to create AJAX request (set content type, set response type, set custom headers)\nBe able to process AJAX response (parse response data)\nBe able to handle AJAX errors (including error codes)\n[fetch]\n[$.ajax]\n\n## Cross-Domain Communication\n\nJSONP\nKnow JSONP prerequisites\nBe able to create JSONP request\nBe able to process JSON response\nBe able to explain difference between JSONP and AJAX\n\n## DOM Manipulation\n\nSelectors\nKnow various types of selectors\nUnderstand selectors impotency and specifity\nKnow how to find and select the certain elements in DOM\nBe able to discover selectors performance issues, limitations and optimizations\nTraversing\nKnow how to traverse DOM tree vertically (parent, childNodes)\nKnow how to traverse DOM tree horizontally (siblings)\nBe able to discover traversing performance and optimizations\nModification\nBe able to add/remove/update DOM elements\nKnow DOM modification performance issues and bottlenecks\nUnderstand DOM optimizations\nLive Collections\n\n## Events Basics\n\nDOM Events\nKnow Event concept\nKnow basic Event types\nMouse / Keyboard Events\nForm / Input Events\n\n## Events Propagation / Preventing\n\nKnow Event propagation cycle\nKnow how to stop Event propagation\nKnow how to prevent Event default browser behavior\nDelegating\nUnderstand Event delegating concept\nUnderstand Event delegating benefits and drawbacks\nBe able to implement Event delegating\n\n## Global object window\n\nLocation\nKnow browser location structure\nBe able to explain client and server side navigation concept\nHistory API (Global object window)\nKnow browser history concept\nBe able to navigate within browser history\nBe able to use history state\nBe able to replace history state\nNavigator\nKnow how to parse user agent\nKnow how to discover client platform, browser\nDocument\nScreen\nCookies\nKnow cookie concept and limitations\nKnow how to work with cookies\nKnow cookie types and security policy\n\n## Modules\n\nCommonJS\nKnow JavaScript modules concept\nKnow CommonJS module notation\nUnderstand difference between module notation and implementation\nBe able to use CommonJS modules in both browser and NodeJS\nAMD, UMD\nKnow AMD notation\nKnow difference between CommonJS/AMD/UMD module notations\nES2015\nKnow ES2015 module notation\n\n## Nodes Modification\n\nNode Properties\nNode Attributes\nKnow how to modify DOM element properties and attributes\nUnderstand DOM element properties / attributes connection\nData Attributes\nCSS Scripting\nBe able to add/toggle/remove CSS classes for DOM element\nBe able to modify inline styles for DOM element\nBe able to explain inline styles performance issues\n\n## Timers\n\n[setTimeout]\n[setInterval]\n[clearTimeout]\n[requestAnimationFrame]\nUnderstand [requestAnimationFrame] concept\nBe able to explain difference between [setTimeout] and [requestAnimationFrame]\n\n## Web Storage\n\nLocalStorage\nSessionStorage\nKnow web storages limitations and security policy\nIndexedDB\n\n## optional\n\n## Cross-Origin Requests\n\nKnow AJAX security policy\nUnderstand cross domain request prerequisites\nBe able to handle AJAX security issues\nIFrame\n\n## Events Advanced\n\nMobile Events\nCustom Events\n\n## Modules Advanced\n\nRequireJS\nKnow how to define AMD module\nKnow how to define AMD module dependencies\nKnow how to wrap CommonJS module for AMD\nBe able to configure RequireJS\nBe able to use RequireJS plugins\nSystemJS\nKnow how to define SystemJS module\nKnow how to define SystemJS module dependencies\nKnow how to wrap CommonJS/AMD modules for SystemJS\nBe able to configure SystemJS\nBe able to use SystemJS plugins\n\n## Page Lifecycle\n\nParsing\nReflow\nRepaint\nOptimizations\n\n## Web Security\n\nCSRF\nKnow CSRF attack vector\nKnow protection methods against CSRF attack\nXSS\nKnow XSS attack vector\nKnow protection methods against XSS attack\nBe able to compare CSRF and XSS attacks\n\n## WebSockets\n\nWebSocket concept\nWenSocket interface","tags":["js","l1"]},{"title":"vue l1","url":"/2019/05/14/grow/vue/vue-l1/"},{"title":"react l1","url":"/2019/05/14/grow/react/react-l1/","content":"\n## Create basic components\n\n### Using JSX\n### Understanding component specs\n### Understanding basic lifecycle events\n### Using state and props\n### Understanding react event system\n\n## Create reusable components\n\n### Validating props\n### Transferring props between components\n### Creating mixins\n### Using refs\n\n## Create complex components\n\n### Understanding full component lifecycle\n### Understanding React top-level API\n### Using raw HTML in React components\n### Adding animation\n### Using ES2015\n\n## Performance\n\n### Understanding components rendering system\n### Using PureRenderMixin\n### Using immutable data structures (ImmutableJS)\n\n## SPA\n\n### Creating SPA using React Router\n\n## Testing\n\n### Unit testing using Jest and/or other testing frameworks\n### Using React testing utilities\n### Using JSDom for testing\n\n## Tools\n\n### Using React Devtools\n### Building and deploying React apps\n### Using React Hot Loader\n\n## Understand Flux\n\n### Understanding unidirectional data flow\n### Using dispatcher\n### Creating stores\n### Creating actions\n### Experience with any library (Redux, Mobx, Reflux, Alt, etc.)\n\n## Advanced React usage\n\n### Designing app architecture using React\n### Profiling and optimizing react components\n### Understanding virtual DOM\n### Using server side rendering\n### Integrating React into other frameworks (e.g. Backbone)\n### Two-way binding\n### Creating E2E tests","tags":["react l1"]},{"title":"js l1","url":"/2019/05/14/grow/js/js-l1/","content":"\n## Arrays\n\n### Array literals\n### Know several options how to create Array\n### Array length\n### Know how Array length property works\n\n## Closures Basics\n\n### Nested functions\n### Able to create nested functions\n### Understand variables visibility for nested scopes\n\n## ECMAScript Basics\n\n### cost, let declarations\n### Understand differences between [var], [let] and [const]\n### Know block scope and [let] visibility\n### Able to explain dead zone concept for [let]\n### Arrow functions\n### Know difference between arrow and usual functions\n### Able to discover cases for both arrow and usual functions using\n\n## Expressions, Operators, Statements\n\n### Operators\n### Know logic, mathematic operators\n### Know operators priority\n### Be able to use operators\n### Conditions\n### Know and able to use conditional statements\n### Loops\n### Know loop types\n### Understand loops differences and applicability\n### Be able to skip loop iteration or break loop\n\n## Functions\n\n### Function declaration/expression\n### Know both Function expression and Function declaration\n### Be able to explain declaration/expression differences\n\n## Objects\n\n### Object literals\n### Know several ways how to create object\n\n## Variables, Values, Data Types\n\n### Variables - Know how to declare variables\n### Values - Know how to assign values to variables\n### Literals - Know basic String, Number, Object, Array literals\n### Primitive Data Types\n### Discover primitive data types\n\n## Advanced Expressions\n\n### Hoisting\n### Understand hoisting concept\n### Able to use hoisting in development\n### Auto data type conversion\n### Know rules of auto data types conversion\n### Be able to discover cases of implicit data types conversion into boolean, string, number\n### Strict comparison\n### Be able to discover difference between strict and non-strict comparison\n### Be able to provide use cases of both types of comparison\n\n## Advanced Functions\n\n### arguments\n### Understand [arguments] and dynamic amount of parameters\n### Be able to use [arguments], retrieve additional parameters\n### [this] scope\n### Understand difference between function and method\n### Understand how [this] works, realize [this] possible issues\n### Manage [this] scope\n### Be able to replace [this] scope\n### Be able to use [call] and [apply] Function build-in methods\n\n## Arrays Built-in methods\n\n### Know how to copy array\n### Know how to copy array part\n### Know how to modify array\n\n## Arrays Iterating, Sorting, Filtering\n\n### Know how to sort Array\n### Be able to custom sorting for Array\n### Be able to filter Array elements\n### Know several method how to iterate Array elements\n### Be able to compare Hash and Array performance\n\n## Closures Advanced\n\n### Context (lexical environment)\n### Understand function creation context (lexical environment)\n### Be able to explain difference between scope and context\n### Inner/outer lexical environment\n### Understand lexical environment traversing mechanism\n### Understand connection between function and lexical environment\n### Be able to discover cases where lexical environment required\n### Be able to create and use closures\n\n## ECMAScript Advanced\n\n### Promises\n### Know how [Promise] works\n### Know promise chain pattern\n### Be able to compare promise and callback patterns\n### Be able to handle errors in promises\n### Be able to use promisification pattern\n### Iterators\n### Know [Iterator] interface\n### Be able to create custom iterator\n### Generators\n### Know generator syntax\n### Be able to compare generator and iterator\n### Understand how [yield] works\n### Understand plain async code\n### Be able to handle errors in generators\n\n## ECMAScript Classes\n\n### Class declaration\n### Know [class] declaration syntax\n### Know how [class] declaration works under the hood\n### Understand difference between [class] and function constructor\n### Understand difference between method and [class] method\n### Be able to develop in OOP style using [class] declaration\n### [constructor] keyword\n### Inheritance\n### Know [extends] syntax and how it works\n### Getter/setter\n### Be able to create getter / setter [class] methods\n\n## ECMAScript Data Types & Expressions\n\n### Object [keys/values]\n### Object calculated props\n### [Symbol] data type\n### Know [Symbol] data type specific\n### Be able to explain difference between usual object key and symbol\n### [Set/Map] data types\n### [WeakSet/WeakMap] data types\n\n## ECMAScript Intermediate\n\n### Function default parameters\n### Discover default parameters concept and limitations\n### Spread operator for Function\n### Know how to use spread operator for Function arguments\n### Be able to compare [arguments] and spread operator\n### Spread operator for Array\n### Understand and able to use spread operator for Array concatenation\n### Destruction\n### Be able to discover destruction concept\n### Understand variables and Function arguments destruction\n### String templates\n### Know String template syntax and rules\n### [for..of] loop\n### Know how [for..of] loop works\n### Be able to compare [for..of] loop with other types of loops\n\n## Functional Inheritance\n\n### Rent a constructor\n### Know functional inheritance pattern\n### Be able to explain difference between functional and prototypal inheritance\n### Be able to discover benefits and drawback of both prototypal and functional inheritance\n### Mix-ins\n### Know mix-in pattern\n### Know mix-in specific and limitations\n### Able to explain benefits and drawbacks comparing with inheritance\n\n## Functional Patterns\n\n### Immediate function\n### Know immediate function pattern\n### Be able to explain the purposes of immediate function usage\n### Callback (Function as argument)\n### Know callback pattern\n### Understand callback limitations (callback hell)\n### Binding\n### Know how to bind [this] scope to function\n### Be able to provide cases when it's required\n\n## Functional Scope\n\n### Know global scope and functional scope\n### Know variables visibility areas\n### Understand nested scopes and able work with them\n\n## Functions Parameters / Arguments\n\n### Know how to define Function parameters\n### Know difference between parameters passing by value and by reference\n### Know how to handle dynamic amount of Function parameters\n\n## JavaScript Errors\n\n### [try..catch] statement\n### Know how to handle errors\n### Be able to explain [try..catch] performance issues\n### Throw errors\n### Custom errors\n\n## Object as Hash\n\n### Be able to use Object as a Hash\n### Be able to loop though Object keys\n\n## Object Oriented Programming\n\n### [new] keyword\n### Understand how [new] keyword works\n### Understand the difference in calling function with / without [new] keyword\n### Function constructor\n### Know function constructor concept\n### Know function constructor pattern\n### Able to create constructor functions\n### Public, private, static members\n### Know how to create public members\n### Know how to create private members\n### Know how to create static members\n### Understand OOP emulation patterns and conventions\n\n## Objects Built-in methods\n\n### Know how to use built-in methods\n### Know static Object methods\n\n## Prototypal Inheritance Basics\n\n### [__proto__] property\n### Understand [__proto__] object property\n### Understand how interpreter traverses object properties\n### Able to work with object [__proto__]\n### Able to use [Object.create] and define [__proto__] explicitly\n### Able to set / get object prototype\n### [prototype] property\n### Know function [prototype] property\n### Understand dependency between function constructor [prototype] and instance [__proto__]\n### Able to create 'class' methods using function [prototype] property\n\n## Regular Expressions Basics\n\n### String methods\n### Know String methods for regular expressions\n### Understand regular expressions performance issues\n### RegExp methods and flags\n### Metacharacters\n### Quantifiers\n\n## optional\n\n## Advanced Functional Patterns\n\n### Chaining\n### Know chaining pattern and cases where it will be useful\n### Currying\n### Know how to bind arguments to function\n### Memorization\n### Know memorization optimization\n### Understand problem with non-primitive arguments memorization\n\n## ECMAScript Classes Advanced\n\n### [super] keyword\n### Understand [super] reference\n### Able to use [super] reference (in constructor, in class methods)\n### [static] keyword\n### Know static members concept\n### Be able to create [class] static properties and methods\n\n## Functions Recursion\n\n### Know recursion concept and able to use it\n### Able to explain recursion risks, benefits and drawbacks\n\n## Object Property Descriptor\n\n### Know how to use property descriptors\n### Be able to explain enumerable, configurable, writable property attributes\n### Be able to create property getter/setter\n\n## Prototypal Inheritance Advanced\n\n### Temporary constructor\n### Know prototypal inheritance mechanism\n### Know prototypal inheritance temporary constructor pattern\n### Be able to explain prototypal chain from instance to its 'class' and 'class' parent\n### Be able to develop in OOP style using prototypal inheritance pattern\n### [instanceof] operator\n### Be able to use [instanceof] operator\n### Know how [instanceof] operator works\n\n## Regular Expressions Advanced\n\n### Ranges\n### Grouping\n### Greedy and lazy search\n### Replacements\n\n## Strict mode\n\n### Strict mode activation\n### Strict mode limitations","tags":["js l1"]},{"title":"css l1","url":"/2019/05/14/grow/css/css-l1/","content":"\n## Basic knowledge\n\n### Syntax, properties and capabilities etc.\n\n## Pseudo-class and pseudo-elements\n\n### Special states and parts of elements\n\n## Selectors\n\n### Specificity, inheritance, cascade rules, CSS3 extension, selector attributes\n\n## Units\n\n### Relative and Absolute Units (em, %, px, pt etc.)\n\n## Block document model and display\n\n### Standard and box block model\n\n### Display property\n\n## CSS3: Animation and Transformation\n\n### Transition, key frames, transformation, rotation, scaling , blend mode\n\n## CSS3: Media Queries\n\n### Syntax and declaration, types, features/properties, operators, usage\n\n## CSS3: Visual effects\n\n### Shadows, rounded corners, gradients, filters etc.\n\n## CSS3: Web Typography\n\n### Web safe fonts, custom web fonts, font formats, icon fonts, font-face, font generators/services etc.\n\n## Positioning\n\n### Document flow\n\n### Position properties\n\n### Overflow and z-index\n\n## CSS3: Flexbox\n\n### Flex layout, axis, directions, flexibility, order, alignment","tags":["css l1"]},{"title":"html l1","url":"/2019/05/14/grow/html/html-l1/","content":"\n## Document Type Definition\n\n### Doctype element, HTML and XHTML syntax differences\n\n### Browser modes\n\n## Layout and text formatting tags\n\n### Layout tags\n\n### HTML 5 structural and semantic tags\n\n### Formatting tags: bold, italic, upper, lower cases and etc.\n\n## Metadata, Styles, Scripts\n\n### Meta tags and page encoding\n\n### Add inline styles, include internal and external CSS\n\n### Include internal and external Script\n\n### Meta viewport property\n\n## Page structure\n\n### Root HTML tags\n\n### Tree model\n\n### Basic HTML elements: headers, listings, links, rare tags and etc.\n\n### HTML tag attributes\n\n## Table, Form, Input Tags\n\n### Table layout tags\n\n### Table attributes\n\n### Form tags and attributes\n\n### Input types\n\n### HTML 5 input types","tags":["html l1"]},{"title":"class","url":"/2019/05/13/js/class/","content":"\n## Class declaration\n\n```js\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n```\n\nA `class expression` is another way to define a class. Class expressions can be named or unnamed. \n\n```js\n// unnamed\nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\nconsole.log(Rectangle.name);\n// output: \"Rectangle\"\n\n// named\nlet Rectangle = class Rectangle2 {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\nconsole.log(Rectangle.name);\n// output: \"Rectangle2\"\n```\n\n## Understand difference between [class] and function constructor\n\nAn important difference between function declarations and class declarations is that function declarations are **hoisted** and class declarations are not. You first need to declare your class and then access it, otherwise code like the following will throw a ReferenceError:\n\n```js\nconst p = new Rectangle(); // ReferenceError\n\nclass Rectangle {}\n```\n\n## Understand difference between [class] and function constructor\n\nThe `constructor` method is a special method for creating and initializing an object created with a class. There can only be one special method with the name \"constructor\" in a class. A `SyntaxError` will be thrown if the class contains more than one occurrence of a `constructor` method.\n\nA constructor can use the `super` keyword to call the constructor of the super class.\n\n## Understand difference between method and [class] method\n\n### Prototype methods\n\n```js\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n\nconst square = new Rectangle(10, 10);\n\nconsole.log(square.area); // 100\n```\n\n### Static methods\n\n```js\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n\n    return Math.hypot(dx, dy);\n  }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\n\nconsole.log(Point.distance(p1, p2)); // 7.0710678118654755\n```\n\n## Inheritance\n\nThe `extends` keyword is used in class declarations or class expressions to create a class as a child of another class.\n\n```js\nclass Animal { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n```\n\n## Getter/setter\n\nThe `get` syntax binds an object property to a function that will be called when that property is looked up.\n\n```js\nvar obj = {\n  log: ['a', 'b', 'c'],\n  get latest() {\n    if (this.log.length == 0) {\n      return undefined;\n    }\n    return this.log[this.log.length - 1];\n  }\n}\n\nconsole.log(obj.latest);\n// expected output: \"c\"\n```\n\nThe `set` syntax binds an object property to a function to be called when there is an attempt to set that property.\n\n```js\nvar language = {\n  set current(name) {\n    this.log.push(name);\n  },\n  log: []\n}\n\nlanguage.current = 'EN';\nlanguage.current = 'FA';\n\nconsole.log(language.log);\n// expected output: Array [\"EN\", \"FA\"]\n```","tags":["js"]},{"title":"Array built-in methods","url":"/2019/05/13/js/Array-built-in-methods/","content":"\n## how to copy array\n\n### simple way\n\n``` js\nconst sheeps = ['🐑', '🐑', '🐑'];\n\n// Old way\nconst cloneSheeps = sheeps.slice();\n\n// ES6 way\nconst cloneSheepsES6 = [...sheeps];\n```\n\n### built-in way\n\nThe `Array.from()` method creates a new, shallow-copied `Array` instance from an array-like or iterable object.\n\n```js\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n### Why Can’t I Use `=` to Copy an Array?\n\nBecause arrays in JS are reference values, so when you try to copy it using the `=` it will only copy the reference to the original array and not the value of the array.\n\nTo create a real copy of an array, you need to copy over the value of the array under a new value variable. That way this new array does not reference to the old array address in memory.\n\n```js\nconst sheeps = ['🐑', '🐑', '🐑'];\n\nconst fakeSheeps = sheeps;\nconst cloneSheeps = [...sheeps];\n\nconsole.log(sheeps === fakeSheeps);\n// true --> it's pointing to the same memory space\n\nconsole.log(sheeps === cloneSheeps);\n// false --> it's pointing to a new memory space\n```\n\n## how to copy array part\n\nThe `slice()` method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.\n\n```js\nvar animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\n\nconsole.log(animals.slice(2));\n// expected output: Array [\"camel\", \"duck\", \"elephant\"]\n\nconsole.log(animals.slice(2, 4));\n// expected output: Array [\"camel\", \"duck\"]\n\nconsole.log(animals.slice(1, 5));\n// expected output: Array [\"bison\", \"camel\", \"duck\", \"elephant\"]\n```\n\n## how to modify array\n\n## how to sort Array\n\n`Array.sort()`\n\n``` js\nvar months = ['March', 'Jan', 'Feb', 'Dec'];\nmonths.sort();\nconsole.log(months);\n// expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\nvar array1 = [1, 30, 4, 21, 100000];\narray1.sort();\nconsole.log(array1);\n// expected output: Array [1, 100000, 21, 30, 4]\n```\n\n## Be able to custom sorting for Array\n\n```js\nfunction compare(a, b) {\n  if (a is less than b by some ordering criterion) {\n    return -1;\n  }\n  if (a is greater than b by the ordering criterion) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}\n```\n\nExample: \n\n``` js\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b) {\n  return a - b;\n});\nconsole.log(numbers);\n\n// [1, 2, 3, 4, 5]\n```\n\n## Be able to filter Array elements\n\nThe `filter()` method creates a new array with all elements that pass the test implemented by the provided function.\n\n```js\nvar words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n```\n\n## Several method how to iterate Array elements\n\n- Basic For Loop\n\n- Lodash forEach\n\n- The `forEach()` method executes a provided function once for each array element.\n\n- The `map()` method creates a new array with the results of calling a provided function on every element in the calling array.\n\n- The `entries()` method returns a new Array Iterator object that contains the key/value pairs for each index in the array.\n","tags":["js","array"]},{"title":"[this] scope","url":"/2019/05/13/js/this-scope/","content":"\n## Global Scope\n\nIn a browser, the global scope is the `window` object.\n\nif in your code you simply have: `var x = 9;` You’re actually setting the property `window.x` to 9 (when working in a browser). You could type `window.x = 9`;\n\n## Local Scope\n\nJavaScript scopes at a function level.\n\n```js\nfunction myFunc() {\n\tvar x = 5;\n};\nconsole.log(x); //undefined\n```\n\nIf you declare a variable & forget to use the `var` keyword, that variable is automatically made global. So this code would work:\n\n```js\nfunction myFunc() {\n\tx = 5;\n});\nconsole.log(x); //5\n```\n\n## this\n\n`this` is a variable that is automatically set for you when a function is invoked. \n\nDepending on how a function is invoked, `this` is set differently:\n\n```js\nfunction foo() {\n\tconsole.log(this); //global object\n};\n```\n\n```js\nmyapp = {};\nmyapp.foo = function() {\n\tconsole.log(this); //points to myapp object\n}\n```\n\n```js\nvar link = document.getElementById(\"myId\");\nlink.addEventListener(\"click\", function() {\n\tconsole.log(this); //points to link\n}, false);\n```\n\n### 在函数内部时，`this`由函数怎么调用来确定。\n\n#### Simple call\n\n简单调用，即独立函数调用。由于`this`没有通过`call`来指定，且`this`必须指向对象，那么默认就指向全局对象。\n\n```js\nfunction f1(){\n  return this;\n}\n\nf1() === window; // global object\n```\n\n在严格模式下，`this`保持进入execution context时被设置的值。如果没有设置，那么默认是`undefined`。它可以被设置为任意值(**包括`null/undefined/1`等等基础值，不会被转换成对象**)。\n\n```js\nfunction f2(){\n  \"use strict\"; // see strict mode\n  return this;\n}\n\nf2() === undefined;\n```\n\n#### Arrow functions\n\n在箭头函数中，`this`由词法/静态作用域设置（set lexically）。它被设置为包含它的execution context的`this`，并且不再被调用方式影响（call/apply/bind）。\n\n```js\nvar globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true\n\n// Call as a method of a object\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// Attempt to set this using call\nconsole.log(foo.call(obj) === globalObject); // true\n\n// Attempt to set this using bind\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true\n```\n\n#### As an object method\n\n当函数作为对象方法调用时，`this`指向该对象。\n\n```js\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n\n`this` on the object's prototype chain\n\n原型链上的方法根对象方法一样，作为对象方法调用时`this`指向该对象。\n\n#### 构造函数\n\n在构造函数（函数用`new`调用）中，`this`指向要被constructed的新对象。\n\n#### call和apply\n\n`Function.prototype`上的`call`和`apply`可以指定函数运行时的`this`。\n\n```js\nfunction add(c, d){\n  return this.a + this.b + c + d;\n}\n\nvar o = {a:1, b:3};\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n```\n\n注意，当用`call`和`apply`而传进去作为`this`的不是对象时，将会调用内置的`ToObject`操作转换成对象。所以4将会装换成`new Number(4)`，而`null/undefined`由于无法转换成对象，全局对象将作为`this`。\n\n#### bind\n\nES5引进了`Function.prototype.bind`。`f.bind(someObject)`会创建新的函数（函数体和作用域与原函数一致），但`this`被永久绑定到`someObject`，不论你怎么调用。\n\n#### As a DOM event handler\n\n`this`自动设置为触发事件的dom元素。\n\n## 参考链接\n\n[从这两套题，重新认识JS的this、作用域、闭包、对象](https://juejin.im/post/59aa71d56fb9a0248d24fae3)\n[深入理解JS中声明提升、作用域（链）和`this`关键字](https://github.com/creeperyang/blog/issues/16)","tags":["js","this"]},{"title":"Parameters & Arguments in JavaScript","url":"/2019/05/13/js/Parameters-Arguments-in-JavaScript/","content":"\n[link](https://codeburst.io/parameters-arguments-in-javascript-eb1d8bd0ef04)\n\n- Parameters are variables listed as a part of the function definition.\n- Arguments are values passed to the function when it is invoked.\n\n``` js\n// Basic function with three parameters that logs the sum of all the parameters\nfunction argCheck(parameter1, parameter2, parameter3){\n  console.log(parameter1 + parameter2 + parameter3);\n}\n\n// Function with extra arguments\nargCheck(1,2,3,4);\n// Logs 6 (1 + 2 + 3, ignores 4)\n\n// Function with missing arguments\nargCheck(1,2);\n// Logs NaN because by default if a corresponding argument is missing, it is set to undefined. \n// parameter3 is assigned undefined and so 1+2+undefined = NaN\n\n// Note that, no error is thrown\n```\n\n```js\nfunction argumentVar(parameter1, parameter2, parameter3){\n  console.log(arguments.length); // Logs the number of arguments passed.\n  console.log(arguments[3]); // Logs the 4th argument. Follows array indexing notations. \n}\n\nargumentVar(1,2,3,4,5);\n// Log would be as follows\n// 5\n// 4\n\n// 5 is the number of arguments\n// 4 is the 4th argument\n```\n\n```js\nfunction restParam(parameter1, ...restArgs){\n  console.log(restArgs.length); // Logs the number of arguments that do not have a corresponding parameter\n  console.log(restArgs[2]); // Logs the 3rd argument after the number of arguments that do not have a corresponding parameter\n}\n\nrestParam(1,2,3,4,5);\n// Log would be as follows\n// 4\n// 4\n\n// 4 is the number of arguments that do not have a corresponding parameter\n// 4 is the 4th 3rd argument after the number of arguments that do not have a corresponding parameter\n```\n\n","tags":["js"]},{"title":"Auto data type conversion","url":"/2019/05/10/js/Auto-data-type-conversion/","content":"\n## 自动转换为布尔值\n\nJavaScript 遇到预期为布尔值的地方（比如`if`语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用`Boolean`函数。\n\n因此除了以下五个值，其他都是自动转为`true`。\n\n``` js\nundefined\nnull\n+0或-0\nNaN\n''（空字符串）\n```\n\n下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是`Boolean`函数。\n\n```js\n// 写法一\nexpression ? true : false\n\n// 写法二\n!! expression\n```\n\n## 自动转换为字符串\n\nJavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。\n\n字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。\n\n```js\n'5' + 1 // '51'\n'5' + true // \"5true\"\n'5' + false // \"5false\"\n'5' + {} // \"5[object Object]\"\n'5' + [] // \"5\"\n'5' + function (){} // \"5function (){}\"\n'5' + undefined // \"5undefined\"\n'5' + null // \"5null\"\n```\n\n## 自动转换为数值\n\nJavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用`Number`函数。\n\n除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\n\n```js\n'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n```\n\n**注意**：`null`转为数值时为0，而`undefined`转为数值时为`NaN`。\n\n一元运算符也会把运算子转成数值。\n\n```js\n+'abc' // NaN\n-'abc' // NaN\n+true // 1\n-false // 0\n```","tags":["js"]},{"title":"提权Hoisting","url":"/2019/05/10/js/提权Hoisting/","content":"\nHoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).\n\n## Declarations are Hoisted\n\n### var\n\nHoisted\n\n### The let and const Keywords\n\nVariables and constants declared with let or const are <font color=red>not hoisted!</font>\n\n## Initializations are Not Hoisted\n\nJavaScript only hoists declarations, not initializations.\n\n``` js\nvar y;\nconsole.log(y); // undefined\ny = 7;\n```\n\nThis is because only the declaration (`var y`), not the initialization (`=7`) is hoisted to the top.\n\nBecause of hoisting, `y` has been declared before it is used, but because initializations are not hoisted, the value of `y` is undefined.\n\n[ES6 系列之 let 和 const](https://juejin.im/post/5b0238f66fb9a07aca7a74ba)","tags":["js"]},{"title":"js Primitive Data Types","url":"/2019/05/10/js/js-Primitive-Data-Types/","content":"\nThese six types are considered to be primitives. A primitive is not an object and has no methods of its own. All primitives are immutable.\n\n- Boolean — true or false\n- Null — no value\n- Undefined — a declared variable but hasn’t been given a value\n- Number — integers, floats, etc\n- String — an array of characters i.e words\n- Symbol — a unique value that's not equal to any other value\n\nEverything else is an Object type.","tags":["js"]},{"title":"js Objects","url":"/2019/05/10/js/js-Objects/","content":"\n## Object Literal\n\nA JavaScript object literal is a comma-separated list of name-value pairs wrapped in curly braces. Object literals encapsulate data, enclosing it in a tidy package.\n\nan example object literal:\n\n```js\nvar myObject = {\n    sProp: 'some string value',\n    numProp: 2,\n    bProp: false\n};\n```\n\nObject literal property values can be of any data type, including array literals, functions, and nested object literals.\n\n### Object Literal Syntax\n\nObject literals are defined using the following syntax rules:\n\n- A colon separates property name from value.\n- A comma separates each name-value pair from the next.\n- There should be no comma after the last name-value pair.\n\n## several ways how to create object\n\nObjects can be initialized using `new Object()`, `Object.create()`, or using the literal notation (initializer notation). \n\n```js\n// Using the Object() constructor:\nvar d = new Object();\n```\n\n```js\n// Using Object.create() method:\nvar a = Object.create(null);\n```\n\n```js\n// Using the bracket's syntactig sugar:\nvar b = {};\n```\n\n```js\n// Using a function constructor\nvar Obj = function(name) {\n  this.name = name\n}\nvar c = new Obj(\"hello\"); \n```\n\n```js\n// Using the function constructor + prototype:\nfunction myObj(){};\nmyObj.prototype.name = \"hello\";\nvar k = new myObj();\n```\n\n```js\n// Using ES6 class syntax:\nclass myObject  {\n  constructor(name) {\n    this.name = name;\n  }\n}\nvar e = new myObject(\"hello\");\n```\n\n```js\n// Singleton pattern:\nvar l = new function(){\n  this.name = \"hello\";\n}\n```","tags":["js","object"]},{"title":"function declaration/expression differences","url":"/2019/05/10/js/function-declaration-expression-differences/","content":"\n- Function **declarations** load before any code is executed.\n\n- Function **expressions** load only when the interpreter reaches that line of code.\n\nSo if you try to call a function expression before it's loaded, you'll get an error! If you call a function declaration instead, it'll always work, because no code can be called until all declarations are loaded.\n\nExample: Function Expression\n\n``` js\nalert(foo()); // ERROR! foo wasn't loaded yet\nvar foo = function() { return 5; } \n```\n\nExample: Function Declaration\n\n``` js\nalert(foo()); // Alerts 5. Declarations are loaded before any code can run.\nfunction foo() { return 5; } \n```\n\n## Function Declaration\n\n```js\nfunction foo() { ... }\n```\n\nBecause of function hoisting, the function declared this way can be called both after and before the definition.\n\n## Function Expression\n\n1. Named Function Expression\n\n```js\nvar foo = function bar() { ... }\n```\n\n2. Anonymous Function Expression\n\n```js\nvar foo = function() { ... }\n```\n\n`foo()` can be called only after creation.\n","tags":["js"]},{"title":"operators and loops","url":"/2019/05/10/js/operators-and-loops/","content":"\n## operators\n\n`i++` 优先级高于 `++i`\n\n## loops\n\n### differences\n\n- A `for` loop is used when you know the number of iterations the loop needs to make. \n- A `while` loop can be used when you need your loop to run an unknown number of times until a specific condition is met. \n- `for/in` - loops through the properties of an object. `while` - loops through a block of code while a specified condition is true. `do/while` - loops through a block of code once, and then repeats the loop while a specified condition is true.\n\n## skip loops\n\n- The `break` statement \"jumps out\" of a loop.\n\n- The `continue` statement \"jumps over\" one iteration in the loop.\n\n\n","tags":["js"]},{"title":"difference between arrow and usual functions","url":"/2019/05/10/js/difference-between-arrow-and-usual-functions/","content":"\n引入箭头函数有两个方面的作用：更简短的函数并且不绑定`this`。\n\n## 不绑定`this`\n\n在箭头函数出现之前，每个新定义的函数都有它自己的 `this`值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 `undefined`，如果该函数被作为“对象方法”调用则为基础对象等）。\n\n箭头函数不会创建自己的`this`,它只会从自己的作用域链的上一层继承`this`。\n\n- 箭头函数不绑定`Arguments` 对象\n- 箭头函数没有定义`this`绑定\n- 箭头函数不能用作构造器，和 `new`一起用会抛出错误。\n- 箭头函数没有`prototype`属性。\n-  `yield` 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器。","tags":["js"]},{"title":"var let const","url":"/2019/05/10/js/var-let-const/","content":"\n[Scoping with var, let & const](https://blog.usejournal.com/scoping-with-var-let-const-c0060135e09d)\n[var vs let vs const in JavaScript](https://tylermcginnis.com/var-let-const/)\n\n## var\n\n- `var` has **functional** scope not block scope\n\n```js\nfunction foo() {\n  var bar = 'hello';\n  console.log(bar);\n}\nconsole.log(bar); // ReferenceError: bar is not defined\n```\n\nvariables defined with var keyword are not block scoped\n\n``` js\nfunction foo() {\n  if (true) {\n    var bar = 'hello';\n  }\n  console.log(bar);\n}\nfoo(); // prints hello\n```\n\n- Variables declared with var keyword are hoisted.\n\n```js\nfunction foo() {\n  if (false) {\n    var bar = 'hello';\n  }\n  console.log(bar);\n}\nfoo(); // prints undefined\n```\n\nThe variable bar defined inside if block is visible to the outside block but within the function foo’s scope. This is because the JavaScript engine read the above code as following:\n\n```js\nfunction foo() {\n  var bar; // hoisted the declaration but not assignment\n  if (false) {\n    bar = 'hello';\n  }\n  console.log(bar); // undefined but no reference error\n}\nfoo(); // prints undefined\n```\n\n- Variables defined with var keywords can be redeclared in the same scope\n\n``` js\nfunction foo() {\n var bar = 'hello';\n if (true) {\n   var bar = 'hi'; // no error !! replaced easily\n }\n console.log(bar);\n}\nfoo(); // prints hi\n```\n\n## let & const \n\n- Variables declared with `let` & `const` keyword are visible only inside the **block** in which it’s defined.\n\n```js\nfunction foo () {\n  if(true) {\n    const baz = 'hi';\n    let bar = 'hello';\n    console.log(baz, bar); // prints hello hi\n  }\n  console.log(baz, bar); // ReferenceError: baz is not defined\n}\nfoo();\n```\n\n- Variables declared with `let` & `const` keyword are **not** subjected to hoisting.\n\n```js\nfunction foo () {\n  console.log(bar); // ReferenceError: bar is not defined\n  let bar = 'hello';\n}\nfoo();\n```\n\n- Variables defined with `let` & `const` keywords **cannot** be redeclared in the same block scope.\n\n``` js\nfunction foo () {\n  let bar = 'hello';\n  const bar = 'hi';\n}\nfoo(); // SyntaxError: Identifier 'bar' has already been declared\n```\n\nBut a variable can be redeclared in function scope, given its declared within a **different** block scope.\n\n``` js\nfunction foo () {\n  let bar = 'hello';\n  if(true) {\n    let bar = 'hi';\n    console.log(bar); // prints hi\n  }\n  console.log(bar); // prints hello \n}\n```\n\n## Able to explain dead zone concept for [let]\n\n[stackoverflow](https://stackoverflow.com/questions/33198849/what-is-the-temporal-dead-zone)\n\naccessing let and const values before they are initialized can cause a ReferenceError because of something called the temporal dead zone.\n\n```js\nconsole.log(aVar); // undefined\nconsole.log(aLet); // causes ReferenceError: aLet is not defined\nvar aVar = 1;\nlet aLet = 2;\n```\n\n> It appears from these examples that `let` declarations (and `const`, which works the same way) may not be hoisted, since `aLet` does not appear to exist before it is assigned a value.\n\n> That is not the case, however—`let` and `const` are **hoisted** (like `var`, `class` and `function`), but there is a period between entering scope and being declared where they cannot be accessed. This period is the **temporal dead zone** (TDZ).\n\n> The TDZ ends when `aLet` is declared, rather than assigned:\n\n``` js\nlet and const have two broad differences from var:\n\nThey are block scoped.\nAccessing a var before it is declared has the result undefined; accessing a let or const before it is declared throws ReferenceError:\nconsole.log(aVar); // undefined\nconsole.log(aLet); // causes ReferenceError: aLet is not defined\nvar aVar = 1;\nlet aLet = 2;\n Run code snippetExpand snippet\nIt appears from these examples that let declarations (and const, which works the same way) may not be hoisted, since aLet does not appear to exist before it is assigned a value.\n\nThat is not the case, however—let and const are hoisted (like var, class and function), but there is a period between entering scope and being declared where they cannot be accessed. This period is the temporal dead zone (TDZ).\n\nThe TDZ ends when aLet is declared, rather than assigned:\n\n//console.log(aLet)  // would throw ReferenceError\n\nlet aLet;\nconsole.log(aLet); // undefined\naLet = 10;\nconsole.log(aLet); // 10\n```\n\nThis example shows that `let` is hoisted:\n\n``` js\nlet x = 'outer value';\n(function() {\n  // start TDZ for x\n  console.log(x);\n  let x = 'inner value'; // declaration ends TDZ for x\n}());\n```\n\nAccessing `x` in the inner scope still causes a `ReferenceError`. If `let` were not hoisted, it would log `outer value`.\n\nThe TDZ is a good thing because it helps to highlight bugs—accessing a value before it has been declared is rarely intentional.\n\n[ES6 系列之 let 和 const](https://juejin.im/post/5b0238f66fb9a07aca7a74ba)","tags":["js"]},{"title":"js Arrays","url":"/2019/05/10/js/js-Arrays/","content":"\n## Array literals\n\narray literal notation is where you define a new array using just empty brackets.`var myArray = [];`\n\nIt is the \"new\" way of defining arrays, and I suppose it is shorter/cleaner.\n\nThe examples below explain the difference between them:\n\n``` js\nvar a = [],            // these are the same\nb = new Array(),   // a and b are arrays with length 0\n\nc = ['foo', 'bar'],           // these are the same\nd = new Array('foo', 'bar'),  // c and d are arrays with 2 strings\n\n// these are different:\ne = [3],             // e.length == 1, e[0] == 3\nf = new Array(3);   // f.length == 3, f[0] == undefined\n```\n\n## Methods\n\n- forEach\n- map\n- push // add to the end\n- unshift // add to the front\n- pop // remove from the end\n- shift // remove from the front\n- splice // remove\n- slice // sub array\n\n## [Array.length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\n\n### how Array length property works\n\n- Reading the length\n\n1) For a dense array, this means that the length corresponds strictly to the number of elements:\n\n``` js\nvar fruits = ['orange', 'apple', 'banana']; //fruits is a dense array  \nfruits.length // prints 3, the real count of elements\n\nfruits.push('mango');  \nfruits.length // prints 4, one element was added\n\nvar empty = [];  \nempty.length // prints 0, empty array  \n```\n\nThe dense array does not have empties and the number of items corresponds to highestIndex + 1. In [3, 5, 7, 8] the highest index is 3 of element 8, thus the array size is 3 + 1 = 4.\n\n2) In a sparse array (which has empties), the number of elements does not correspond to length value, but still is determined by the highest index:\n\n``` js\nvar animals = ['cat', 'dog', , 'monkey']; // animals is sparse  \nanimals.length // prints 4, but real number of elements is 3\n\nvar words = ['hello'];  \nwords[6] = 'welcome'; //the highest index is 6. words is sparse  \nwords.length //prints 7, based on highest index \n```\n\n- Modifying the length\n\n1) Modifying the property leads to cut the elements (if the new value is smaller than the highest index):\n\n``` js\nvar numbers = [1, 3, 5, 7, 8];\n\nnumbers.length = 3; // modify the array length  \nnumbers // prints [1, 3, 5], elements 7 and 8 are removed\n```\n\n2) or creating a sparse array (if the new value is bigger than the highest index):\n\n``` js\nvar osTypes = ['OS X', 'Linux', 'Windows'];\n\nosTypes.length = 5; // creating a sparse array. Elements at indexes 3 and 4  \n                    // do not exist\n\nosTypes // prints ['OS X', 'Linux', 'Windows', , , ] \n```","tags":["js","array"]},{"title":"flexbox","url":"/2019/05/09/css/flexbox/","content":"\n### Parent Element (Container)\n\nThe flex container becomes flexible by setting the display property to flex:\n\n``` css\n.flex-container {\n  display: flex;\n}\n```\n\nThe flex container properties are:\n\n- flex-direction\n  - row\n  - row-reverse\n  - column\n  - column-reverse\n- flex-wrap\n  - nowrap\n  - wrap\n  - wrap-reverse\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/flex-wrap.png)\n\n- flex-flow\n\nThe flex-flow property is a shorthand property for: flex-direction, flex-wrap\n\n- order\n\nThe order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.\n\n- justify-content\n- align-items\n- align-content\n\n\n","tags":["CSS"]},{"title":"positioning","url":"/2019/05/09/css/positioning/","content":"\n## [Document flow](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow)\n\nBy default, a block level element's content is 100% of the width of its parent element, and as tall as its content. Inline elements are as tall as their content, and as wide as their content. You can't set width or height on inline elements — they just sit inside the content of block level elements. If you want to control the size of an inline element in this manner, you need to set it to behave like a block level element with display: block; (or even,display: inline-block; which mixes characteristics from both.)\n\n## [Position properties](https://www.w3schools.com/css/css_positioning.asp)\n\n- static\n- relative\n- fixed\n- absolute\n- sticky\n\n## Overflow\n\n- visible - Default. The overflow is not clipped. The content renders outside the element's box\n- hidden - The overflow is clipped, and the rest of the content will be invisible\n- scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content\n- auto - Similar to scroll, but it adds scrollbars only when necessary\n\n## z-index\n\nThe z-index property specifies the stack order of an element.\n\nAn element with greater stack order is always in front of an element with a lower stack order.\n\n**Note**: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky).","tags":["CSS"]},{"title":"web typography","url":"/2019/05/09/css/web-typography/","content":"\n## [web safe fonts](https://www.w3schools.com/cssref/css_websafe_fonts.asp)\n\nThe font-family property should hold several font names as a \"fallback\" system, to ensure maximum compatibility between browsers/operating systems. If the browser does not support the first font, it tries the next font.\n\nStart with the font you want, and end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available:\n\n``` css\np {\n  font-family: \"Times New Roman\", Times, serif;\n}\n```\n\n## [custom web fonts](https://stackoverflow.com/questions/12144000/using-custom-fonts-using-css)\n\nGenerically, you can use a custom font using @font-face in your CSS. Here's a very basic example:\n\n``` css\n@font-face {\n    font-family: 'YourFontName'; /*a name to be used later*/\n    src: url('http://domain.com/fonts/font.ttf'); /*URL to font*/\n}\n```\n\nThen, trivially, to use the font on a specific element:\n\n``` css\n.classname {\n    font-family: 'YourFontName';\n}\n```\n\n## font formats\n\n- TrueType Fonts (TTF)\n\nTrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft Windows operating systems.\n\n- OpenType Fonts (OTF)\n\nOpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. OpenType fonts are used commonly today on the major computer platforms.\n\n- The Web Open Font Format (WOFF)\n\nWOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF is essentially OpenType or TrueType with compression and additional metadata. The goal is to support font distribution from a server to a client over a network with bandwidth constraints.\n\n- The Web Open Font Format (WOFF 2.0)\n\nTrueType/OpenType font that provides better compression than WOFF 1.0.\n\n- SVG Fonts/Shapes\n\nSVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 specification define a font module that allows the creation of fonts within an SVG document. You can also apply CSS to SVG documents, and the @font-face rule can be applied to text in SVG documents.\n\n- Embedded OpenType Fonts (EOT)\n\nEOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages.\n\n## icon fonts\n\nIcon fonts are fonts that contain symbols and glyphs instead of letters or numbers. \n\n## [font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face)\n\n","tags":["CSS"]},{"title":"visual effects","url":"/2019/05/09/css/visual-effects/","content":"\n## shadow\n\n### box-shadow\n\n### text-shadow\n\n## rounded corners\n\n- border-radius\n\n## [gradients](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients)\n\n- linear-gradients\n- radial-gradient\n\n## [filters](https://developer.mozilla.org/en-US/docs/Web/CSS/filter)","tags":["CSS"]},{"title":"Media queries","url":"/2019/05/09/css/Media-queries/","content":"\n[mdn](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries)\n\n**Media queries** let you adapt your site or app depending on the presence or value of various device characteristics and parameters.\n\nThey are a key component of responsive design. For example, a media query can shrink the font size on small devices, increase the padding between paragraphs when a page is viewed in portrait mode, or bump up the size of buttons on touchscreens.\n\nIn CSS, use the `@media` at-rule to conditionally apply part of a style sheet based on the result of a media query. Use `@import` to conditionally apply an entire style sheet.\n\n## [Using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)\n\n``` css\n/* Set the background color of body to tan */\nbody {\n  background-color: tan;\n}\n\n/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\n  body {\n    background-color: blue;\n  }\n}\n\n/* On screens that are 600px or less, set the background color to olive */\n@media screen and (max-width: 600px) {\n  body {\n    background-color: olive;\n  }\n}\n```\n\n### Media types\n\n- all\nSuitable for all devices.\n- print\nIntended for paged material and documents viewed on a screen in print preview mode. (Please see paged media for information about formatting issues that are specific to these formats.)\n- screen\nIntended primarily for screens.\n- speech\nIntended for speech synthesizers.\n\n### Media features\n\nwidth, height and etc.\n\n### Logical operators\n\n- and\n- not\n- only\n- ,","tags":["CSS"]},{"title":"blend mode","url":"/2019/05/09/css/blend-mode/","content":"\n[mdn](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode)\n\nThe `<blend-mode>` CSS data type describes how colors should appear when elements overlap. It is used in the background-blend-mode and mix-blend-mode properties.\n\nFor each pixel among the layers to which it is applied, a blend mode takes the colors of the foreground and the background, perfoms a calculation on them, and returns a new color value.\n\n","tags":["CSS"]},{"title":"animation and transition","url":"/2019/05/09/css/animation-and-transition/","content":"\n## animation\n\n[mdn](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n\nThe animation shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n\n## transition\n\n[mdn](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)\n\nThe transition CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n\n## @keyframes\n\nThe **@keyframes** CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence. This gives more control over the intermediate steps of the animation sequence than transitions.\n\n``` css\n@keyframes slidein {\n  from {\n    margin-left: 100%;\n    width: 300%;\n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n```\n\n## transformation\n\nThe **transform** CSS property lets you `rotate`, `scale`, `skew`, or `translate` an element. It modifies the coordinate space of the CSS visual formatting model.\n\n``` css\n/* Keyword values */\ntransform: none;\n\n/* Function values */\ntransform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\ntransform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\ntransform: translate(12px, 50%);\ntransform: translate3d(12px, 50%, 3em);\ntransform: translateX(2em);\ntransform: translateY(3in);\ntransform: translateZ(2px);\ntransform: scale(2, 0.5);\ntransform: scale3d(2.5, 1.2, 0.3);\ntransform: scaleX(2);\ntransform: scaleY(0.5);\ntransform: scaleZ(0.3);\ntransform: rotate(0.5turn);\ntransform: rotate3d(1, 2.0, 3.0, 10deg);\ntransform: rotateX(10deg);\ntransform: rotateY(10deg);\ntransform: rotateZ(10deg);\ntransform: skew(30deg, 20deg);\ntransform: skewX(30deg);\ntransform: skewY(1.07rad);\ntransform: perspective(17px);\n\n/* Multiple function values */\ntransform: translateX(10px) rotate(10deg) translateY(5px);\n\n/* Global values */\ntransform: inherit;\ntransform: initial;\ntransform: unset;\n```\n\n","tags":["CSS"]},{"title":"The box model","url":"/2019/05/09/css/The-box-model/","content":"[mdn](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Box_model)\n\n## box model\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/box-model.png)\n\n## Types of CSS boxes\n\nThe type of box applied to an element is specified by the `display` property. There are many different values available for display, but in this article we will focus on the three most common ones; `block`, `inline`, and `inline-block`.","tags":["CSS"]},{"title":"CSS values and units","url":"/2019/05/09/css/CSS-values-and-units/","content":"\n[MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Values_and_units)\n\n- Numeric values: Length values for specifying e.g. element width, border thickness, or font size, and unitless integers for specifying e.g. relative line width or number of times to run an animation.\n- Percentages: Can also be used to specify size or length — relative to a parent container's width or height for example, or the default font-size. These are often to facilitate responsive design (e.g. creating \"liquid layouts\", which automatically adjust to fit on different screen sizes).\n- Colors: For specifying background colors, text colors, etc.\n- Functions: For specifying e.g. background images or background image gradients.\n\n**Pixels** (px) are referred to as **absolute units** because they will always be the same size regardless of any other related settings. Other absolute units are as follows:\n\n- q, mm, cm, in: Quarter millimeters, millimeters, centimeters, or inches.\n- pt, pc: Points (1/72 of an inch) or picas (12 points.)\n\nYou probably won't use any of these very often except pixels.\n\nThere are also **relative units**, which are relative to the current element's **font-siz**e or **viewport** size:\n\n- em: 1em is the same as the font-size of the current element. The default base font-size given to web pages by web browsers before CSS styling is applied is 16 pixels, which means the computed value of 1em is 16 pixels for an element by default. But beware — font sizes are inherited by elements from their parents, so if different font sizes have been set on parent elements, the pixel equivalent of an em can start to become complicated. Don't worry too much about this for now — we'll cover inheritance and font-sizing in more detail in later articles and modules. em are the most common relative unit you'll use in web development.\n- ex, ch: Respectively these are the height of a lower case x, and the width of the number 0. These are not as commonly used or well-supported as em.\n- rem: The rem (root em) works in exactly the same way as the em, except that it will always equal the size of the default base font-size; inherited font sizes will have no effect, so this sounds like a much better option than em, although rems don't work in older versions of Internet Explorer (see more about cross-browser support in Debugging CSS.)\n- vw, vh: Respectively these are 1/100th of the width of the viewport, and 1/100th of the height of the viewport. Again, these are not as widely supported as em.\n- %","tags":["CSS"]},{"title":"CSS selectors","url":"/2019/05/09/css/CSS-selectors/","content":"\n[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)\n\n## Simple selectors\n\n- Type selector\n  - Selects all elements that match the given node name.\n  - Syntax: eltname\n  - Example: input will match any <input> element.\n- Class selector\n  - Selects all elements that have the given class attribute.\n  - Syntax: .classname\n  - Example: .index will match any element that has a class of \"index\".\n- ID selector\n  - Selects an element based on the value of its id attribute. There should be only one element with a given ID in a document.\n  - Syntax: #idname\n  - Example: #toc will match the element that has the ID \"toc\".\n- Universal selector\n  - Selects all elements. Optionally, it may be restricted to a specific namespace or to all namespaces.\n  - Syntax: * ns|* *|*\n  - Example: * will match all the elements of the document.\n- Attribute selector\n  - Selects elements based on the value of the given attribute.\n  - Syntax: [attr] [attr=value] [attr~=value] [attr|=value] [attr^=value] [attr$=value] [attr*=value]\n  - Example: [autoplay] will match all elements that have the autoplay attribute set (to any value).\n\n## Combinators\n\n- Adjacent sibling combinator\n  - The + combinator selects adjacent siblings. This means that the second element directly follows the first, and both share the same parent.\n  - Syntax: A + B\n  - Example: h2 + p will match all <p> elements that directly follow an <h2>.\n- General sibling combinator\n  - The ~ combinator selects siblings. This means that the second element follows the first (though not necessarily immediately), and both share the same parent.\n  - Syntax: A ~ B\n  - Example: p ~ span will match all <span> elements that follow a <p>, immediately or not.\n- Child combinator\n  - The > combinator selects nodes that are direct children of the first element.\n  - Syntax: A > B\n  - Example: ul > li will match all <li> elements that are nested directly inside a <ul> element.\n- Descendant combinator\n  - The   (space) combinator selects nodes that are descendants of the first element.\n  - Syntax: A B\n  - Example: div span will match all <span> elements that are inside a <div> element.\n- Column combinator \n  - The || combinator selects nodes which belong to a column.\n  - Syntax: A || B\n  - Example: col || td will match all <td> elements that belong to the scope of the <col>.\n\n## Pseudo-classes\n\nPseudo-classes allow the selection of elements based on state information that is not contained in the document tree.\n\n- Example: a:visited will match all <a> elements that have been visited by the user.\n\n## Pseudo-elements\n\nPseudo-elements represent entities that are not included in HTML.\n\n- Example: p::first-line will match the first line of all <p> elements.\n","tags":["CSS"]},{"title":"Pseudo-classes and pseudo-elements","url":"/2019/05/09/css/Pseudo-classes-and-pseudo-elements/","content":"\n[MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Pseudo-classes_and_pseudo-elements)\n\n## Pseudo-classes\n\nA CSS **pseudo-class** is a keyword added to the end of a selector, preceded by a colon (:), which is used to specify that you want to style the selected element but only when it is in a certain state. For example, you might want to style a link element only when it is being hovered over by the mouse pointer, or a checkbox when it is disabled or checked, or an element that is the first child of its parent in the DOM tree.\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/pseudo-classes.png)\n\n## Pseudo-elements\n\nPseudo-elements are very much like pseudo-classes, but they have differences. They are keywords, this time preceded by two colons (::), that can be added to the end of selectors to select a certain part of an element.\n\n- ::after\n- ::before\n- ::first-letter\n- ::first-line\n- ::selection\n- ::backdrop","tags":["CSS"]},{"title":"HTML table form input","url":"/2019/05/09/html/HTML-table-form-input/","content":"\n## Table layout tags\n\n[mdn](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)\n\n- Use the HTML `<table>` element to define a table\n- Use the HTML `<tr>` element to define a table row\n- Use the HTML `<td>` element to define a table data\n- Use the HTML `<th>` element to define a table heading\n- Use the HTML `<caption>` element to define a table caption\n- Use the CSS `border` property to define a border\n- Use the CSS `border-collapse` property to collapse cell borders\n- Use the CSS `padding` property to add padding to cells\n- Use the CSS `text-align` property to align cell text\n- Use the CSS `border-spacing` property to set the spacing between cells\n- Use the `colspan` attribute to make a cell span many columns\n- Use the `rowspan` attribute to make a cell span many rows\n- Use the `id` attribute to uniquely define one table\n\n``` css\n/* Keyword values */\ntable-layout: auto;\ntable-layout: fixed;\n\n/* Global values */\ntable-layout: inherit;\ntable-layout: initial;\ntable-layout: unset;\n```\n\n## Table attributes\n\n- align\n- bgcolor\n- border\n- cellpadding\n- cellspacing\n\n## Form tags and attributes\n\nThe `<form>` tag is used to create an HTML form for user input.\n\nThe `<form>` element can contain one or more of the following form elements:\n\n- `<input>`\n- `<textarea>`\n- `<button>`\n- `<select>`\n- `<option>`\n- `<optgroup>`\n- `<fieldset>`\n- `<label>`\n- `<output>`\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/form-attributes.png)\n\n## Input types\n\nThe available types are as follows:\n\n- button: A push button with no default behavior.\n- checkbox: A check box allowing single values to be selected/deselected.\n- color: **HTML5** A control for specifying a color. A color picker's UI has no required features other than accepting simple colors as text (more info).\n- date: **HTML5** A control for entering a date (year, month, and day, with no time).\n- datetime-local: **HTML5** A control for entering a date and time, with no time zone.\n- email: **HTML5** A field for editing an e-mail address.\n- file: A control that lets the user select a file. Use the accept attribute to define the types of files that the control can select.\n- hidden: A control that is not displayed but whose value is submitted to the server.\n- image: A graphical submit button. You must use the src attribute to define the source of the image and the alt attribute to define alternative text. You can use the height and width attributes to define the size of the image in pixels.\n- month: **HTML5** A control for entering a month and year, with no time zone.\n- number: **HTML5** A control for entering a number.\n- password: A single-line text field whose value is obscured. Use the maxlength and minlength attributes to specify the maximum length of the value that can be entered.\n- Note: Any forms involving sensitive information like passwords (e.g. login forms) should be served over HTTPS; Firefox now implements multiple mechanisms to warn against insecure login forms — see Insecure passwords. Other browsers are also implementing similar mechanisms.\n- radio: A radio button, allowing a single value to be selected out of multiple choices.\n- range: **HTML5** A control for entering a number whose exact value is not important.\n- reset: A button that resets the contents of the form to default values.\n- search: **HTML5** A single-line text field for entering search strings. Line-breaks are automatically removed from the input value.\n- submit: A button that submits the form.\n- tel: **HTML5** A control for entering a telephone number.\n- text: A single-line text field. Line-breaks are automatically removed from the input value.\n- time: **HTML5** A control for entering a time value with no time zone.\n- url: **HTML5** A field for entering a URL.\n- week: **HTML5** A control for entering a date consisting of a week-year number and a week number with no time zone.\n\nSome input types are now obsolete:\n\n- datetime: A control for entering a date and time (hour, minute, second, and fraction of a second) based on UTC time zone. This feature has been removed from WHATWG HTML.","tags":["HTML"]},{"title":"HTML DOM","url":"/2019/05/09/html/HTML-DOM/","content":"\n## The HTML DOM (Document Object Model)\n\nWhen a web page is loaded, the browser creates a Document Object Model of the page.\n\nThe HTML DOM model is constructed as a tree of Objects:\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/htmltree.gif)\n\n## What is the HTML DOM?\n\nThe HTML DOM is a standard object model and programming interface for HTML. It defines:\n\n- The HTML elements as objects\n- The properties of all HTML elements\n- The methods to access all HTML elements\n- The events for all HTML elements\n\nIn other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.","tags":["HTML"]},{"title":"Root HTML tags","url":"/2019/05/09/html/Root-HTML-tags/","content":"HTML Root Tags represent the main or the starting tag that should be present in all the HTML documents. The HTML tag is the first tag that comes after the <!DOCTYPE> tag and within which other HTML tags are specified. This tag allows the browser to identify the document type.\n\n## Definition and Usage\n\nThe `<html>` tag tells the browser that this is an HTML document.\n\nThe `<html>` tag represents the root of an HTML document.\n\nThe `<html>` tag is the container for all other HTML elements (except for the `<!DOCTYPE>` tag).","tags":["HTML"]},{"title":"Understanding external, internal, and inline CSS styles","url":"/2019/05/09/css/Understanding-external-internal-and-inline-CSS-styles/","content":"\nCascading Style Sheets (CSS) are files with styling rules that govern how your website is presented on screen. CSS rules can be applied to your website’s HTML files in various ways. You can use an **external stylesheet**, an **internal stylesheet**, or an **inline style**. Each method has advantages that suit particular uses.\n\nAn **external stylesheet** is a standalone .css file that is linked from a web page. The advantage of external stylesheets is that it can be created once and the rules applied to multiple web pages. Should you need to make widespread changes to your site design, you can make a single change in the stylesheet and it will be applied to all linked pages, saving time and effort.\n\nAn **internal stylesheet** holds CSS rules for the page in the **head** section of the HTML file. The rules only apply to that page, but you can configure CSS classes and IDs that can be used to style multiple elements in the page code. Again, a single change to the CSS rule will apply to all tagged elements on the page.\n\n**Inline styles** relate to a specific HTML tag, using a **style** attribute with a CSS rule to style a specific page element. They’re useful for quick, permanent changes, but are less flexible than external and internal stylesheets as each inline style you create must be separately edited should you decide to make a design change.\n\n## Using external CSS stylesheets\n\nAn HTML page styled by an external CSS stylesheet must reference the .css file in the document head. Once created, the CSS file must be uploaded to your server and linked in the HTML file with code such as:\n\n``` html\n<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n## Using internal CSS stylesheets\n\nRather than linking an external .css file, HTML files using an internal stylesheet include a set of rules in their **head** section. CSS rules are wrapped in `<style>` tags, like this:\n\n``` html\n<head>\n<style type=\"text/css\">\n\n    h1 {\n            color:#fff\n            margin-left: 20px;\n       }\n\n    p {\n        font-family: Arial, Helvetica, Sans Serif;     \n       }\n\n\n</style>\n</head>\n```\n\nYou can name your stylesheet whatever you wish, but it should have a .css file extension.\n\n## Using inline styles\nInline styles are applied directly to an element in your HTML code. They use the **style** attribute, followed by regular CSS properties.\n\nFor example:\n\n``` html\n<h1 style=\"color:red;margin-left:20px;\">Today’s Update</h1>\n```","tags":["CSS"]},{"title":"HTML meta tags","url":"/2019/05/09/html/HTML-meta-tags/","content":"\n## Definition and Usage\n\nMetadata is data (information) about data.\n\nThe `<meta>` tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.\n\nMeta elements are typically used to specify page description, keywords, author of the document, last modified, and other metadata.\n\nThe metadata can be used by browsers (how to display content or reload page), search engines (keywords), or other web services.\n\nHTML5 introduced a method to let web designers take control over the viewport (the user's visible area of a web page), through the `<meta>` tag (See \"Setting The Viewport\" example below).\n\n## Tips and Notes\n\n**Note**: `<meta>` tags always go inside the `<head>` element.\n\n**Note**: Metadata is always passed as name/value pairs.\n\n**Note**: The content attribute MUST be defined if the name or the http-equiv attribute is defined. If none of these are defined, the content attribute CANNOT be defined.\n\n## Differences Between HTML 4.01 and HTML5\n\nThe scheme attribute is not supported in HTML5.\n\nHTML5 has a new attribute, charset, which makes it easier to define charset:\n\n- HTML 4.01: `<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">`\n- HTML5: `<meta charset=\"UTF-8\">`\n\n## Examples\n\nExample 1 - Define keywords for search engines:\n\n``` html\n<meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\">\n```\n\nExample 2 - Define a description of your web page:\n\n``` html\n<meta name=\"description\" content=\"Free Web tutorials on HTML and CSS\">\n```\n\nExample 3 - Define the author of a page:\n\n``` html\n<meta name=\"author\" content=\"John Doe\">\n```\n\nExample 4 - Refresh document every 30 seconds:\n\n``` html\n<meta http-equiv=\"refresh\" content=\"30\">\n```\n\nExample 5 - Setting the viewport to make your website look good on all devices:\n\n``` html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n## Attributes\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/meta.png)\n\n## Viewport \n\n[Using the viewport meta tag to control layout on mobile browsers](https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag)\n\n### What is The Viewport?\nThe viewport is the user's visible area of a web page.\n\nThe viewport varies with the device, and will be smaller on a mobile phone than on a computer screen.\n\nBefore tablets and mobile phones, web pages were designed only for computer screens, and it was common for web pages to have a static design and a fixed size.\n\nThen, when we started surfing the internet using tablets and mobile phones, fixed size web pages were too large to fit the viewport. To fix this, browsers on those devices scaled down the entire web page to fit the screen.\n\n### Setting The Viewport\n\nHTML5 introduced a method to let web designers take control over the viewport, through the `<meta>` tag.\n\nYou should include the following `<meta>` viewport element in all your web pages:\n\n``` html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\nA `<meta>` viewport element gives the browser instructions on how to control the page's dimensions and scaling.\n\nThe width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\n\nThe initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.\n\n### Size Content to The Viewport\n\nUsers are used to scroll websites vertically on both desktop and mobile devices - but not horizontally!\n\nSo, if the user is forced to scroll horizontally, or zoom out, to see the whole web page it results in a poor user experience.\n\nSome additional rules to follow:\n\n1. Do NOT use large fixed width elements - For example, if an image is displayed at a width wider than the viewport it can cause the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport.\n\n2. Do NOT let the content rely on a particular viewport width to render well - Since screen dimensions and width in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well.\n\n3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute CSS widths for page elements will cause the element to be too wide for the viewport on a smaller device. Instead, consider using relative width values, such as width: 100%. Also, be careful of using large absolute positioning values. It may cause the element to fall outside the viewport on small devices.","tags":["HTML"]},{"title":"HTML Layout","url":"/2019/05/09/html/HTML-Layout/","content":"\n## HTML5 offers new semantic elements that define the different parts of a web page:\n\nHTML5 Semantic Elements\t\n\n- `<header>` - Defines a header for a document or a section\n- `<nav>` - Defines a container for navigation links\n- `<section>` - Defines a section in a document\n- `<article>` - Defines an independent self-contained article\n- `<aside>` - Defines content aside from the content (like a sidebar)\n- `<footer>` - Defines a footer for a document or a section\n- `<details>` - Defines additional details\n- `<summary>` - Defines a heading for the `<details>` element\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/html%26css/html_layout.gif)\n\n## HTML Layout Techniques\n\nThere are five different ways to create multicolumn layouts. Each way has its pros and cons:\n\n- HTML tables (not recommended)\n- CSS float property\n- CSS flexbox\n- CSS framework\n- CSS grid","tags":["HTML"]},{"title":"browser modes","url":"/2019/05/08/html/browser-modes/","content":"\n# 浏览器模式\n\n首先我们要知道，为什么会有这么多模式。其实这是个历史遗留问题，在浏览器大战时期，网景浏览器（Netscape Navigator）和微软的IE浏览器（Microsoft Internet Explorer）对网页分别有不同的实现方式，那个时候的网页要针对这两种浏览器分别开发不同的版本。而到了W3C制定标准之后，这些浏览器就不能继续使用这种页面了，因而会导致大部分现有站点都不能使用。基于这个原因，浏览器才引入两种模式来处理一些遗留的站点。\n\n__现在的浏览器排版引擎支持三种模式：__\n\n1. 怪异（Quirks）模式：在怪异模式中，排版引擎会模拟 网景4和Windows中的IE5的行为。\n2. 准标准（Almost Standards）：在准标准模式中，则只包含很少的一部分怪异模式中的行为。\n3. 标准（Standards）模式：在完全标准的模式中，会尽量执行HTML和CSS规范所指定的行为。\n\n__各主流浏览器对三种模式的描诉：__\n\n- FireFox：[Mozilla's DOCTYPE sniffing](https://developer.mozilla.org/en-US/docs/Mozilla's_DOCTYPE_sniffing)\n- Opera：[DOCTYPE Switches support in Opera](http://www.opera.com/docs/specs/doctype/)\n- IE：[Defining document compatibility](http://msdn.microsoft.com/en-us/library/cc288325(v=vs.85\\).aspx) ([中文](http://msdn.microsoft.com/zh-cn/library/cc288325(v=vs.85\\).aspx))\n\n------\n\n## 模式详解\n\n### 内容类型为text/html的模式\n\n1. 怪异模式（Quirks Mode）\n    * 怪异模式中，为了避免“破坏”那些根据在20世纪90年代末流行的实践创作的页面，浏览器违反了现代的Web格式规范。<br>\n不同的浏览器实现了不同的怪异行为。Internet Explorer6、7和8中，怪异模式有效地冻结在IE5.5 。其他浏览器中，怪异模式是对准标准模式的少量偏移。<br>\n__如果正在创作新网页，你应该符合相关的规范（特别是CSS2.1）且使用标准模式。__\n\n2. 标准模式（Standards Mode）\n    * 标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。<br>\n不同的浏览器遵循不同的阶段，所以标准模式也不是一个单一目标。<br>\nHTML5把这种模式叫“非怪异模式（no quirks mode）”\n\n3. 准标准模式（Almost Standards Mode）\n    * Firefox、Safari、Chrome、Opera(从7.5开始)和IE8也有个叫“准标准模式”的模式，它按照传统的做法来实现表格单元格的垂直尺寸而不是严格的遵照CSS2规范。<br>\nMac IE5、Windows IE6和7、Opera7.5以前版本和Konqueror无需准标准模式，因为它们至少没有在各自的标准模式下严格遵循CSS2规范来实现表格单元格垂直尺寸。实际上，它们的标准模式更接近Mozilla的准标准模式而不是Mozilla的标准模式。<br>\nHTML5把这种模式叫着“受限怪异模式(limited quirks mode)”。\n\n\n### 内容类型为application/xhtml+xml的模式（XML模式）\n\n- Firefox、Safari、Chrome和Opera中，application/xhtml+xml HTTP内容类型（不是meta元素也不是doctype!）会触发XML模式。<br>\n在XML模式中，浏览器尝试给XML文档在规范上的正确处理达到在制定浏览器中的程度。\n\n- IE6、7和8不支持application/xhtml+xml，Mac IE5也如此。\n\n\n### 非Web模式（Non-Web Modes）\n\n某些引擎拥有的模式与Web内容无关。<br>\n例如：Opera有个WML2.0模式。Leopard上的WebKit有个用于旧式Dashboard widgets的特定模式。\n\n\n## 模式的影响\n\n### 布局\n\n1. text/html的模式主要是影响CSS布局。例如：\n    * 怪异模式下表格不继承样式。\n    * 在某些浏览器的怪异模式下，盒模型（box model）变成IE5.5的盒模型。\n    * 在IE的怪异模式中，元素的width包含了padding和border，而标准模式中padding和border 并不属于宽度的一部分。\n    * [最初的准标准模式](http://meyerweb.com/eric/thoughts/2008/01/24/almost-target/)只会[影响表格中的图像](https://developer.mozilla.org/en-US/docs/Images,_Tables,_and_Mysterious_Gaps)（包含图片的表格单元格的高和标准模式中不同），而后来各个浏览器又或多或少地进行了修改。\n2. XML模式中，选择器有不同的区分大小写行为。此外，用于HTML body元素的特有规则不能应用在那些没有实现最新CSS2.1改变的较旧版本的浏览器。\n\n### 解析\n\n也有一些怪异影响HTML和CSS的解析且会导致符合标准的网页被错误解析。了解怪异模式和标准模式在CSS布局和解析（非HTML解析）上的主要异同是非常重要的。\n\n一些人错误地把标准模式称为“严格解析模式（strict parsing mode）”，其让人误解了浏览器强制执行HTML语法规则和用浏览器评估标记的正确性。情况并非如此。即使当标准模式布局生效时，浏览器依旧会做[tag soup](http://en.wikipedia.org/wiki/Tag_soup)修正工作。（在2000年Netscape6发布前，Mozilla的确有用于强制执行HTML语法规则的解析模式。这些模式和现有的Web内容不兼容而被遗弃。）\n\n另一个常见的误解是关于XHTML解析的。通常认为用XHTML doctype得到不同的解析。其实并非如此，内容类型是text/html的XHTML文档所用解析器和HTML文档的是同一个。目前浏览器在意的是文档类型为text/html的XHTML仅是“tag soup with croutons”（额外的斜线，闭合\"/>\"）。<br>\n仅当使用XML文档类型的文档（例如：application/xhtml+xml或xmapplication/）会触发XML模式来解析，这时的解析器完全不同于HTML解析器。\n\n### 脚本\n\n虽然怪异模式主要是关于CSS的，但也有一些是关于脚本的。例如，Firefox的怪异模式中，HTML id 属性像在IE一样建立了全局脚本作用域的对象引用。IE8中关于脚本的影响比其他浏览器更值得关注。\n\nXML模式中，某些DOM API的行为彻底不同，因为XML的DOM API行为被定义时不兼容HTML的行为。\n\n\n## IE的模式\n\nIE8有4种模式：IE5.5怪异模式、IE7标准模式、IE8准标准模式和IE8标准模式，<br>\n而IE9有7种模式：IE5.5怪异模式、IE7标准模式、IE8准标准模式、IE8标准模式、IE9准标准模式、IE9标准模式、XML模式。\n\n### IE9的浏览器模式和文档模式\n\n如果你使用的是IE9，那么按下F12键就会出现开发者工具，上面有两个下拉菜单：浏览器模式和文档模式。那么什么是浏览器模式？什么又是文档模式？二者有何区别？\n\n* 浏览器模式用于切换IE针对该网页的默认文档模式、对不同版本浏览器的条件注释解析、以及发送给网站服务器的用户代理（User-Agent）字符串的值。网站可以根据浏览器返回的不同用户代理字符串判断浏览器的版本和及安装的功能，这样就可以根据不同的浏览器返回不同的页面内容了。\n\n* 文档模式用于指定IE的页面排版引擎（Trident）以哪个版本的方式来解析并渲染网页代码。切换文档模式会导致网页被刷新，但不会更改用户代理字符串中的版本号，也不会从服务器重新下载网页。切换浏览器模式的同时，浏览器也会自动切换到相应的文档模式。\n\n一言以蔽之，浏览器模式会影响服务器端对客户端浏览器版本的判断，对条件注释也有影响；而文档模式会影响IE的排版引擎，对网页渲染会有影响，对CSS hack也会产生影响。因此，通过条件注释可以判断浏览器模式，而使用CSS hack可以判断文档模式。\n\n### IE9兼容性视图与IE9标准视图\n\n如果我们使用一句简单的JavaScript语句来查看用户代理（User-Agent）字符串的值，则可以看到IE9兼容性视图与IE9的区别：\n\n    alert('UA:'+navigator.userAgent);  \n\n输出结果如下所示，注意其中的MSIE版本号已经不同。判断浏览器模式就是判断User-Agent中的版本号，即MSIE后面的数值：\n\n    // IE9  \n    UA:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)  \n     \n    // IE9 兼容性视图  \n    UA:Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; Tablet PC 2.0) \n     \n    //真实IE7\n    Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\n\n话说IE9兼容性视图是模拟IE7的行为，那么IE9兼容性视图与IE7有没有区别呢？<br>\n肯定是有区别的，即使是IE9中的IE7标准模式，与原生的IE7在渲染上也是有区别的，具体我们暂不去深究。\n\n那么既然IE9兼容性视图的版本号跟IE7相同，如何才能判断当前是IE9兼容性视图，还是纯正的IE7呢？<br>\n其实很简单，只需要判断浏览器的用户代理（User-Agent）字符串中是否包含Trident即可。<br>\n首先检测MSIE的版本号是否为7.0，然后再判断是否含有Trident字串，若包含则为IE9兼容性视图，否则则为纯正的IE7。\n\n### 文档模式的检测\n\n在JavaScript中可以通过documentMode来检测文档模式，在IE6和IE7中是使用compatMode来确定文档模式的，这个属性自IE8开始已经被documentMode所替代。\n```javascript\nengine = null;  \nif (window.navigator.appName == \"Microsoft Internet Explorer\")  \n{  \n    // This is an IE browser. What mode is the engine in?  \n    if (document.documentMode) // IE8 or later  \n        engine = document.documentMode;  \n    else // IE 5-7  \n    {  \n        engine = 5; // Assume quirks mode unless proven otherwise  \n        if (document.compatMode)  \n        {  \n            if (document.compatMode == \"CSS1Compat\")  \n                engine = 7; // standards mode  \n        }  \n        // There is no test for IE6 standards mode because that mode  \n        // was replaced by IE7 standards mode; there is no emulation.  \n    }  \n    // the engine variable now contains the document compatibility mode.  \n} \n```\n\n## 参考资料\n\n- [深入理解浏览器兼容性模式](http://www.csdn.net/article/2012-10-22/2811049-Understanding-the-browser-compatibility-)\n- [用doctype激活浏览器模式](http://dancewithnet.com/2009/06/14/activating-browser-modes-with-doctype/)([英文原版](http://hsivonen.iki.fi/doctype/))\n- [关于浏览器模式和文本模式的困惑](https://imququ.com/post/browser-mode-and-document-mode-in-ie.html)\n","tags":["broswer"]},{"title":"HTML vs XHTML","url":"/2019/05/08/html/HTML-vs-XHTML/","content":"\n## The Most Important Differences from HTML:\n\n- Document Structure\n  - XHTML DOCTYPE is **mandatory**\n  - The xmlns attribute in <html> is **mandatory**\n  - <html>, <head>, <title>, and <body> are **mandatory**\n- XHTML Elements\n  - XHTML elements must be **properly nested**\n  - XHTML elements must always be **closed**\n  - XHTML elements must be in **lowercase**\n  - XHTML documents must have **one root element**\n- XHTML Attributes\n  - Attribute names must be in **lower case**\n  - Attribute values must be **quoted**\n  - Attribute minimization is **forbidden**\n\n### <!DOCTYPE ....> Is Mandatory\n\nAn XHTML document must have an XHTML DOCTYPE declaration.\n\nA complete list of all the XHTML Doctypes is found in our HTML Tags Reference.\n\nThe <html>, <head>, <title>, and <body> elements must also be present, and the xmlns attribute in <html> must specify the xml namespace for the document.\n\nThis example shows an XHTML document with a minimum of required tags:\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n  <title>Title of document</title>\n</head>\n\n<body>\n  some content \n</body>\n\n</html>\n```\n\n### XHTML Elements Must Be Properly Nested\n\nIn HTML, some elements can be improperly nested within each other, like this:\n\n``` html\n<b><i>This text is bold and italic</b></i>\n```\n\nIn XHTML, all elements must be properly nested within each other, like this:\n\n``` html\n<b><i>This text is bold and italic</i></b>\n```\n\n### XHTML Elements Must Always Be Closed\n\nThis is correct:\n\n``` html\n<p>This is a paragraph</p>\n<p>This is another paragraph</p>\n```\n\n### Empty Elements Must Also Be Closed\n\nThis is correct:\n\n``` html\nA break: <br />\nA horizontal rule: <hr />\nAn image: <img src=\"happy.gif\" alt=\"Happy face\" />\n```\n\n### XHTML Elements Must Be In Lower Case\n\n``` html\n<body>\n<p>This is a paragraph</p>\n</body>\n```\n\n### XHTML Attribute Names Must Be In Lower Case\n\n``` html\n<table width=\"100%\">\n```\n\n### Attribute Values Must Be Quoted\n\n``` html\n<table width=\"100%\">\n```\n\n### Attribute Minimization Is Forbidden\n\nWrong:\n\n``` html\n<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked />\n```\n\nCorrect:\n\n``` html\n<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked=\"checked\" />\n```\n\n## How to Convert from HTML to XHTML\n\n- Add an XHTML <!DOCTYPE> to the first line of every page\n- Add an xmlns attribute to the html element of every page\n- Change all element names to lowercase\n- Close all empty elements\n- Change all attribute names to lowercase\n- Quote all attribute values\n\n[Link](https://www.w3schools.com/html/html_xhtml.asp)","tags":["HTML"]},{"title":"微信小程序体验版转发后无法打开","url":"/2019/05/05/总结/微信小程序体验版转发后无法打开/","content":"\n体验版小程序 点击推荐给朋友\n这个页面的推荐给朋友,推荐出去 打开的是正式版","tags":["微信小程序"]},{"title":"You Dont't Know JS 笔记(2)","url":"/2019/05/05/读书笔记/You Dont Know JS/You-Dont-t-Know-JS-笔记-2/","content":"\n# Scope & Closures\n\n## Chapter 1: What is Scope?\n\n## Chapter 2: Lexical Scope\n\n## Chapter 3: Function vs. Block Scope\n\n### Scope From Functions\n\n```js\nfunction foo(a) {\n\tvar b = 2;\n\n\t// some code\n\n\tfunction bar() {\n\t\t// ...\n\t}\n\n\t// more code\n\n\tvar c = 3;\n}\n```\n\nIn this snippet, the scope bubble for `foo(..)` includes identifiers `a`, `b`, `c` and `bar`. **It doesn't matter** *where* in the scope a declaration appears, the variable or function belongs to the containing scope bubble, regardless. We'll explore how exactly *that* works in the next chapter.\n\n`bar(..)` has its own scope bubble. So does the global scope, which has just one identifier attached to it: `foo`.\n\nBecause `a`, `b`, `c`, and `bar` all belong to the scope bubble of `foo(..)`, they are not accessible outside of `foo(..)`. That is, the following code would all result in `ReferenceError` errors, as the identifiers are not available to the global scope:\n\n```js\nbar(); // fails\n\nconsole.log( a, b, c ); // all 3 fail\n```\n\nHowever, all these identifiers (`a`, `b`, `c`, `foo`, and `bar`) are accessible *inside* of `foo(..)`, and indeed also available inside of `bar(..)` (assuming there are no shadow identifier declarations inside `bar(..)`).\n\n### Functions As Scopes\n\n### Blocks As Scopes","tags":["js"]},{"title":"原型 prototype","url":"/2019/05/05/js/原型 prototype/"},{"title":"闭包 closure","url":"/2019/05/05/js/闭包closure/","content":"\n\n[深入贯彻闭包思想，全面理解JS闭包形成过程](https://segmentfault.com/a/1190000009886713)\n[link](https://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html)\n\n## 关于闭包的面试题","tags":["js","closure"]},{"title":"You Dont't Know JS 笔记(1)","url":"/2019/04/30/读书笔记/You Dont Know JS/You-Dont-t-Know-JS 笔记/","content":"\n# Up & Going\n\n## Chapter 1: Into Programming\n\n### get user input\n\n``` js\nage = prompt( \"Please tell me your age:\" );\n\nconsole.log( age );\n```\n\n### Converting Between Types\n\n``` js\nvar a = \"42\";\nvar b = Number( a );\n\nconsole.log( a ); // \"42\"\nconsole.log( b ); // 42\n```\n\n### Scope\n\n``` js\nfunction outer() {\n\tvar a = 1;\n\n\tfunction inner() {\n\t\tvar b = 2;\n\n\t\t// we can access both `a` and `b` here\n\t\tconsole.log( a + b );\t// 3\n\t}\n\n\tinner();\n\n\t// we can only access `a` here\n\tconsole.log( a );\t\t\t// 1\n}\n\nouter();\n```\n\nSo, code inside the `inner()` function has access to both variables `a` and `b`, but code in `outer()` has access only to `a` -- it cannot access `b` because that variable is only inside `inner()`.\n\n## Chapter 2: Into JavaScript\n\n### Values & Types\n\n- string\n- number\n- boolean\n- null and undefined\n- object\n- symbol (new to ES6)\n\n``` js\na = null;\ntypeof a;\t\t\t\t// \"object\" -- weird, bug\n```\n\nAlso, note `a = undefined`. We're explicitly setting `a` to the `undefined` value, but that is behaviorally no different from a variable that has no value set yet, like with the `var a`; line at the top of the snippet. A variable can get to this \"undefined\" value state in several different ways, including functions that return no values and usage of the void operator.\n\narray and function. But rather than being proper built-in types, these should be thought of more like subtypes -- specialized versions of the `object` type.\n\n### 强制类型转化\n\n``` js\nvar a = \"42\";\nvar b = a * 1;\t// \"42\" implicitly coerced to 42 here\n\na;\t\t\t\t// \"42\"\nb;\t\t\t\t// 42 -- the number!\n```\n\n``` js\nvar a = 42;\nvar b = a + 'a';\n\na;\t\t\t\t// 42\nb;\t\t\t\t// \"42a\" -- the String!\n```\n\nYou should take special note of the == and === comparison rules if you're comparing two non-primitive values, like objects (including function and array). Because those values are actually held by reference, both == and === comparisons will simply check whether the references match, not anything about the underlying values.\n\nFor example, arrays are by default coerced to strings by simply joining all the values with commas (`,`) in between. You might think that two arrays with the same contents would be == equal, but they're not:\n\n``` js\nvar a = [1,2,3];\nvar b = [1,2,3];\nvar c = \"1,2,3\";\n\na == c;\t\t// true\nb == c;\t\t// true\na == b;\t\t// false\n```\n\nhow can all three of those comparisons be false? Because the `b` value is being coerced to the \"invalid number value\" `NaN` in the `<` and `>` comparisons, and the specification says that `NaN` is neither greater-than nor less-than any other value.\n\n``` js\nvar a = 42;\nvar b = \"foo\";\n\na < b;\t\t// false\na > b;\t\t// false\na == b;\t\t// false\n```\n\n#### False\n\n- \"\" (empty string)\n- 0, -0, NaN (invalid number)\n- null, undefined\n- false\n\n#### True\n\n- \"hello\"\n- 42\n- true\n- [ ], [ 1, \"2\", 3 ] (arrays)\n- { }, { a: 42 } (objects)\n- function foo() { .. } (functions)\n\n### Function Scopes\n\n#### Hoisting\n\n``` js\nvar a = 2;\n\nfoo();\t\t\t\t\t// works because `foo()`\n\t\t\t\t\t\t// declaration is \"hoisted\"\n\nfunction foo() {\n\ta = 3;\n\n\tconsole.log( a );\t// 3\n\n\tvar a;\t\t\t\t// declaration is \"hoisted\"\n\t\t\t\t\t\t// to the top of `foo()`\n}\n\nconsole.log( a );\t// 2\n```\n\n#### Nested Scopes\n\n``` js\n\nfunction foo() {\n\tvar a = 1;\n\n\tfunction bar() {\n\t\tvar b = 2;\n\n\t\tfunction baz() {\n\t\t\tvar c = 3;\n\n\t\t\tconsole.log( a, b, c );\t// 1 2 3\n\t\t}\n\n\t\tbaz();\n\t\tconsole.log( a, b );\t\t// 1 2\n\t}\n\n\tbar();\n\tconsole.log( a );\t\t\t\t// 1\n}\n\nfoo();\n```\n\nNotice that `c` is not available inside of `bar()`, because it's declared only inside the inner `baz()` scope, and that `b` is not available to `foo()` for the same reason.\n\nES6 lets you declare variables to belong to individual blocks (pairs of `{ .. }`), using the `let` keyword\n\n### Immediately Invoked Function Expressions (IIFEs)\n\n``` js\n(function IIFE(){\n\tconsole.log( \"Hello!\" );\n})();\n// \"Hello!\"\n```\n\nThe outer `( .. )` that surrounds the `(function IIFE(){ .. })` function expression is just a nuance of JS grammar needed to prevent it from being treated as a normal function declaration.\n\nThe final `()` on the end of the expression -- the `})();` line -- is what actually executes the function expression referenced immediately before it.\n\nBecause an IIFE is just a function, and functions create variable scope, using an IIFE in this fashion is often used to declare variables that won't affect the surrounding code outside the IIFE:\n\n``` js\nvar a = 42;\n\n(function IIFE(){\n\tvar a = 10;\n\tconsole.log( a );\t// 10\n})();\n\nconsole.log( a );\t\t// 42\n```\n\nIIFEs can also have return values:\n\n``` js\nvar x = (function IIFE(){\n\treturn 42;\n})();\n\nx;\t// 42\n```\n\n### Closure\n\nYou can think of closure as a way to \"remember\" and continue to access a function's scope (its variables) even once the function has finished running.\n\n``` js\nfunction makeAdder(x) {\n\t// parameter `x` is an inner variable\n\n\t// inner function `add()` uses `x`, so\n\t// it has a \"closure\" over it\n\tfunction add(y) {\n\t\treturn y + x;\n\t};\n\n\treturn add;\n}\n\n// `plusOne` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusOne = makeAdder( 1 );\n\n// `plusTen` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusTen = makeAdder( 10 );\n\nplusOne( 3 );        // 4  <-- 1 + 3\nplusOne( 41 );        // 42 <-- 1 + 41\n\nplusTen( 13 );        // 23 <-- 10 + 13\n```\n\nMore on how this code works:\n\n1. When we call `makeAdder(1)`, we get back a reference to its inner `add(..)` that remembers `x` as `1`. We call this function reference `plusOne(..)`.\n2. When we call `makeAdder(10)`, we get back another reference to its inner `add(..)` that remembers `x` as `10`. We call this function reference `plusTen(..)`.\n3. When we call `plusOne(3)`, it adds `3` (its inner `y`) to the `1` (remembered by `x`), and we get `4` as the result.\n4. When we call `plusTen(13)`, it adds `13` (its inner `y`) to the `10` (remembered by `x`), and we get `23` as the result.\n\n### `this` Identifier\n\n``` js\nfunction foo() {\n\tconsole.log( this.bar );\n}\n\nvar bar = \"global\";\n\nvar obj1 = {\n\tbar: \"obj1\",\n\tfoo: foo\n};\n\nvar obj2 = {\n\tbar: \"obj2\"\n};\n\n// --------\n\nfoo();\t\t\t\t// \"global\"\nobj1.foo();\t\t\t// \"obj1\"\nfoo.call( obj2 );\t\t// \"obj2\"\nnew foo();\t\t\t// undefined\n```\n\nThere are four rules for how `this` gets set, and they're shown in those last four lines of that snippet.\n\n1. `foo()` ends up setting `this` to the global object in non-strict mode -- in strict mode, `this` would be `undefined` and you'd get an error in accessing the `bar` property -- so `\"global\"` is the value found for `this.bar`.\n2. `obj1.foo()` sets `this` to the `obj1` object.\n3. `foo.call(obj2)` sets `this` to the `obj2` object.\n4. `new foo()` sets `this` to a brand new empty object.\n\n### Prototypes\n\nWhen you reference a property on an object, if that property doesn't exist, JavaScript will automatically use that object's internal prototype reference to find another object to look for the property on. You could think of this almost as a fallback if the property is missing.\n\nThe internal prototype reference linkage from one object to its fallback happens at the time the object is created. The simplest way to illustrate it is with a built-in utility called `Object.create(..)`.\n\n``` js\nvar foo = {\n\ta: 42\n};\n\n// create `bar` and link it to `foo`\nvar bar = Object.create( foo );\n\nbar.b = \"hello world\";\n\nbar.b;\t\t// \"hello world\"\nbar.a;\t\t// 42 <-- delegated to `foo`\n```\n\nThe `a` property doesn't actually exist on the `bar` object, but because `bar` is prototype-linked to `foo`, JavaScript automatically falls back to looking for `a` on the `foo` object, where it's found.\n\n### Polyfilling\n\nES6 defines a utility called `Number.isNaN(..)` to provide an accurate non-buggy check for `NaN` values\n\n### Transpiling\n\nHere's a quick example of transpiling. ES6 adds a feature called \"default parameter values.\"\n\n``` js\nfunction foo(a = 2) {\n\tconsole.log( a );\n}\n\nfoo();\t\t// 2\nfoo( 42 );\t// 42\n```\n\n","tags":["js"]},{"title":"JSON Web Token","url":"/2019/04/30/网络/JSON-Web-Token/","content":"\nJSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案\n\n[Link](http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html)\n\n## 一、跨域认证的问题\n\n一般流程是下面这样\n\n> 1、用户向服务器发送用户名和密码。\n> 2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。\n> 3、服务器向用户返回一个 session_id，写入用户的 Cookie。\n> 4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。\n> 5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。\n\n这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。\n\n举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？\n\n一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。\n\n另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。\n\n## 二、JWT 的原理\n\nJWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。\n\n``` json\n{\n  \"姓名\": \"张三\",\n  \"角色\": \"管理员\",\n  \"到期时间\": \"2018年7月1日0点0分\"\n}\n```\n\n以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。\n\n服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展\n\n## 三、JWT 的数据结构\n\n实际的 JWT 是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的\n\nJWT 的三个部分依次如下。\n\n- Header（头部）\n- Payload（负载）\n- Signature（签名）\n\n写成一行，就是下面的样子。\n\n`Header.Payload.Signature`\n\n### 3.1 Header\n\nHeader 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。\n\n``` json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。\n\n最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。\n\n### 3.2 Payload\n\nPayload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。\n\n```\niss (issuer)：签发人\nexp (expiration time)：过期时间\nsub (subject)：主题\naud (audience)：受众\nnbf (Not Before)：生效时间\niat (Issued At)：签发时间\njti (JWT ID)：编号\n```\n\n除了官方字段，你还可以在这个部分定义私有字段\n\n注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。\n\n这个 JSON 对象也要使用 Base64URL 算法转成字符串。\n\n### 3.3 Signature\n\nSignature 部分是对前两部分的签名，防止数据篡改。\n\n首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。\n\n```js\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n```\n\n算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。\n\n### 3.4 Base64URL\n\nJWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。\n\n## 四、JWT 的使用方式\n\n客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。\n\n此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。\n\n``` http\nAuthorization: Bearer <token>\n```\n\n另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。\n\n## 五、JWT 的几个特点\n\n（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\n\n（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\n\n（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\n\n（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\n\n（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\n\n（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\n\n## 其他\n\n第三方程序获取用户数据，需要用户授权时用[oauth](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)，比如QQ登录，微信登录等。\n\n第三方程序直接获取数据，只做接口认证用时用jwt，比如各种云服务的接入。\n\n在Web应用中，别再把JWT当做session使用，绝大多数情况下，传统的cookie-session机制工作得更好\n\nJWT适合一次性的命令认证，颁发一个有效期极短的JWT，即使暴露了危险也很小，由于每次操作都会生成新的JWT，因此也没必要保存JWT，真正实现无状态。","tags":["token","jwt"]},{"title":"关于mongoose.save()在koa-router的post中返回404的问题","url":"/2019/04/29/总结/关于mongoose-save-在koa-router的post中返回404的问题/","content":"\n## 问题代码\n\n``` js\nrouter.post('/signup', async (ctx, next) => {\n  const data = ctx.request.body\n  const user = {\n    username: data.username,\n    email: data.email,\n    password: data.password\n  }\n  const newUser = new User(user);\n\n  // express中的写法\n  await newUser.save(err => {\n    if (!err) {\n      ctx.body = {\n        code: 0,\n        status: 200,\n        message: '注册成功'\n      }\n    } else if (err.code === 11000) {\n      ctx.body = {\n        code: -1,\n        status: 200,\n        message: '此邮箱已注册'\n      }\n    } else {\n      ctx.body = {\n        code: 999,\n        status: 200,\n        message: '未知错误'\n      }\n    }\n  })\n})\n```\n\n上面的代码不行, postman中总是会显示 404 not found\n\n然后尝试了\n\n``` js\nlet code\nawait newUser.save(err => {\n  if (!err) {\n    code = 0\n  } else if (err.code === 11000) {\n    code = -1\n  } else {\n    code = 999\n  }\n})\n\nconsole.log(code)\n```\n\n也不行, 打印一直是 undefined\n\n后来有在网上看到 `let res = await newUser.save()`的写法, 但是koa会报错.\n\n## 解决方法\n\n花了一天时间, 终于想到可以用try catch来解决这个问题\n\n``` js\nrouter.post('/signup', async (ctx, next) => {\n  const data = ctx.request.body\n  const user = {\n    username: data.username,\n    email: data.email,\n    password: data.password\n  }\n  const newUser = new User(user);\n\n  try {\n    let res = await newUser.save()\n    if (res) {\n      ctx.body = {\n        code: 0,\n        status: 200,\n        message: '注册成功'\n      }\n    }\n  }\n  catch (err) {\n    if (err.code === 11000) {\n      ctx.body = {\n        code: -1,\n        status: 200,\n        message: '此邮箱已注册'\n      }\n    } else {\n      ctx.body = {\n        code: 999,\n        status: 200,\n        message: '未知错误'\n      }\n    }\n  }\n})\n```\n\n这样终于可以在 postman 中正确的返回body了!\n","tags":["koa","mongoose"]},{"title":"Koa+Taro搭建CMS","url":"/2019/04/26/koa/Koa-Taro搭建CMS/","content":"\n## 登录功能\n\n使用 POST 请求\n\n### 用户认证\n\n## 注册功能\n\n### 验证码\n\n``` js\nconst svgCaptcha = require('svg-captcha');\n\n// 生成验证码\nconst captcha = svgCaptcha.create();\n\nrouter.get('/signup', async (ctx, next) => {\n  ctx.status = 200;\n  ctx.type = 'svg';\n  ctx.body = captcha.data;\n})\n```\n\n## dashboard","tags":["koa","taro"]},{"title":"<koa和node.js开发实战>笔记","url":"/2019/04/25/koa/koa和node-js开发实战-笔记/","content":"\n## 2\n\n### 2.2 Context对象\n\n``` js\napp.use(async ctx => {\n  ctx; // 这是 Context\n  ctx .request; //这是 Koa Request\n  ctx.response; //这是 Koa Response\n  this; //这也是 Context\n  this.request; //这也是 Koa Request\n  this .response; //这也是 Koa Response\n));\n```\n\n#### ctx.request\n\n``` js\nctx.response.body = {\n  url: ctx. request. url, //获取请求 URL\n  query: ctx.request.query, //获取解析的查询字符串\n  querystring : ctx.request.querystring //获取原始查询字符串\n}\n```\n\n随后在浏览器中访问 `http://localhost:3000/?search=koa&keywords=context`，便可以看到 一串字符串，如下所示 :\n\n``` js\n{\n  'url':'/?search=koa&keywords=context',\n  'query' : { 'search' : 'koa', 'keywords' : 'context' } ,\n  'querystring':'search=koa&keywords=context'\n}\n```\n\nPOST请求的参数获取方式和 GET请求不同. \n\nKoa没有封装获取 POST请求参数的方 法，因此需要解析 Context 中的原生 Node.js请求对象 req, 或者使用 `koa-bodyparser`中间件\n\n#### ctx.response\n\n在实际开发中， 除设置一个请求的响应主体外， 往往还需要通过 `ctx.response.status` 设置请求状态，如 200, 404, 500 等。\n\n通过 `ctx.response.type` 可以设置响应的 `Content-Type`, 如果响应内 容是 HTML 格式，则设置为 `ctx.response.type ='html'`;如果响应内容是一张 png 图片，则设置为 `ctx.response句pe ='1mage/png'`。显式地设置 `Content-Type`是因为浏览器默认 的 `Content-Type` 是 `text/plain`，如果 `Content-Type` 不对会发生解析错误。\n\n通过`ctx.request.accepts()`函数来判断客户端期望的数据类型\n\n通过 `ctx.response.body` 设置响应体内容\n\n和 `ctx.request.accepts()`类似的一个方法是 `ctx.response.is(types...)`，它可以用来检查响应类型是否是所提供的类型之一，这对创建操纵响应的中间件特别有用 。\n\n还有一个比较常用的方法是 `ctx.response.redirect(url, [alt])`，这个方法用于将状态码 302 重定 向到 URL，例如用 户登录后自动重定向到网站的首页。\n\n#### ctx.state\n\n`ctx.state` 是推荐 的命名空间，用于通过中间件传递信息和前端视图。类似 koa-views 这 些渲染 View层的中间件也会默认把 ctx.state里面的属性作为 View 的上下文传入。\n\n#### ctx.cookies\n\nctx.cookies 用于获取和设置 Cookie\n\n``` js\nctx.cookies.get(name, [optionsJ); //获取Cookie\nctx.cookies.set(name, value, [options]); // 设置Cookie\n```\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/koa/ctx.cookie.options.png)\n\n#### ctx.throw\n\nctx.throw用于抛出错误，把错误信息返回给用户， 代码示例如下:\n\n``` js\napp.use(async (ctx) => {\n  ctx.throw(500);\n});\n```\n\n### 2.3 Koa的中间件\n\n通过 app.use()函数来加载中间件。\n\n中间件函数是一个带有 ctx 和 next 两个参数的简单函数。\n\nctx 就是之前章节介绍的上下文，封装了 Request 和 Response 等对象; next 用于把中间件的执行权交给下游的中间件。 在 next()之前使用 await 关键字是因为 next()会返回一个 Promise 对象，而在当前中间件中位 于 next()之后的代码会暂停执行，直到最后一个中间件执行完毕后，再自下而上依次执行每 个中间件中 next()之后的代码，类似于一种先进后出的堆枝结构。\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/koa/onion.png)\n\n下面通过具体代码来演示中间件的执行，如下所示:\n\n``` js\napp.use (async function (ctx, next) {\n  console.log('one start');\n  await next();\n  console.log('one end');\n));\napp.use (async function (ctx, next) {\n  console.log('two start');\n  ctx.body = 'two';\n  await next();\n  console.log('two end');\n)};\napp.use (async function (ctx, next) {\n  console.log('three start');\n  await next();\n  console.log('three end');\n)};\n```\n\n这段代码中有 3个中间件， 执行结果如下:\n\n``` js\none start\ntwo start\nthree start\nthree end\ntwo end\none end\n```\n\n如果想将多个中间件组合成一个单一的中间件, 便于重用或导出，可以使用`koa-compose`，代码如下:\n\n``` js\nconst all = compose ([middlewarel, middleware2, middleware3]);\napp.use(all);\n```\n\n如果一个中间件没有调用 `await next()`，又会发生什么情况呢? 答案是:后面的中间件将不会被执行。\n\n#### 常用 Koa 中间件\n\n- koa-bodyparser\n- koa-router\n- koa-static\n- koa-views\n\n## 3 路由\n\n前端路由主要解决了两个问题:在页面不刷新的前提下实现 URL 的变化，以及捕捉URL的变化并执行相应的页面逻辑。\n\n### RESTful 规范\n\nREST 的全称是 Representational State Transfer，即表现层状态转移.\n\nREST设计一般符合以下条件:\n\n- 程序或应用的事物都应该被抽象为资源。\n- 每个资源对应唯一的URI。(URI的全称是 UniformResource Identifier，即统一资源标识符，是一个用于标识某一互联网资源名称的字符串)\n- 使用统一的接口对资源进行操作。\n- 对资源的各种操作不会改变资源标识。\n- 所有的操作都是无状态的。\n\n在该场景中，需要完成对网站用户的新增、修改、删除和查看操作。在非RESTful架构中，一般被设计为如下所示:\n\n``` js\nhttps://api.test.com/addUser // POST方法，请求发送新增用户信息\nhttps://api.test.com/deleteUser //POST方法，请求发送用户的 ID\n```\n\n而基于RESTful架构设计的 API，全局只提供唯一的URI: `https://api.test.com/users`\n\n``` js\nhttps://api.test.com/users // POST方法， 请求发送新增用户信息\nhttps://api.test.com/users/:id // DELETE方法，用户ID是URI的一部分\nhttps://api.test.com/users/:id // PUT方法，请求发送用户的信息, ID是 URI 的一部分\nhttps://api.test.com/users/:id // GET方法，用户 ID是 URI 的一部分\n```\n\nGitHub的API设计被称为RESTful API教科书的典范，地址为`https://developer.github.com/v3/`。 同时，不得不提的是 GitHub v4 的 API 使用了全新的设计风格 GraphQL ，地址为 `https://developer.github.com/v4/`。 GraphQL 提供了一套完整描述，使客户端能够没有任何冗余地准确获得需要的数据。\n\n### 用法\n\n如果一条路由请求在 all()方法和其他方法中同时命中， 只有执行了 `await next()`，这条路由请求才会在 all()方法和其他方法中都起作用\n\n在项目中， all()方法一般用来设置请求头，如设置过期时间、CORS (Cross-Origin Resource Sharing ，跨域资源共享)等，\n\n``` js\n//通过调用路由的名称 user，生成路由==”/users/3”\nrouter.url('url', 3);\n//通过调用路由的名称user，生成路由== ”/users/3”\nrouter.url('user', { id: 3 ));\n```\n\n#### 命名路由\n\n使用 `router.url()`方法可以在代码中根据路由名称和参数(可选)生成具体的 URL，而不用采用宇符串拼接的方式去生成 URL。\n\n#### 嵌套路由\n\n``` js\nconst forums = new Router ();\nconst posts = new Router ();\nposts.get('/', function (ctx, next) {...});\nposts.get('/:pid', function (ctx, next) {... });\nforums.use('/forums/:fid/posts', posts.routes(), posts.allowedMethods());\n//获取互联网版块列表的接口\n// ”/forums/:fid/posts”=>”/forums/123/posts”\n//获取互联网版块下某篇文章的接口\n// ”/forums/:fid/posts/:pid”=> ”/forums/123/posts/123”\napp.use(forums.routes());\n```\n\n#### 路由前缀\n\n``` js\nlet router = new Router ({\n  prefix:'/users'\n});\n//匹配路由”/users”\nrouter.get('/',...);\n//匹配路由” /users/:id”\nrouter.get('/:id',...);\n```\n\n#### URL参数\n\n``` js\nrouter.get('/:category/:title', function (ctx, next) {\n  // 响应请求'/programming/how-to-koa'\n  console.log(ctx .params);\n  //参数解析=> ( category: 'programming', title:'how-to-koa')\n});\n```\n\n### 通过 koa-router实现接口的权限控制\n\n常见鉴别用户权限的方式有两种，一种是广泛使用的 `Cookie-Based Authentication` (基于 Cookie 的认证模式)，另一种是 `Token-Based Authentication` (基于 Token 的认证模式) 。\n\n本案例采用 Token 方式认证。 \n\nToken 方式最大的 优点在于采用了无状态机制，在此基础上，可以实现天然的跨域支持、前后端分离等，同时降低了服务端开发和维护的成本 。\n\nToken 方式的缺点在于服务器每次都需要对 Token 进行校验，这一步骤会对服务器产生运算压力 。 \n\n另一方面，无状态 API 缺乏对用户流程或异常的控制，为了避免出现一些例如回放攻击的异常情况，应该设置较短的过期时间，且需要对密钥进行严格的保护 。对于具有复杂流程的高危场景(如支付等〉， 则要谨慎选择 Token 认证模式 。\n\n在本案例中，选用 jsonwebtoken (以下简称 JWT)来实现 Token 的生成、校验和解码。Token 的中间件实现选择 `koa-jwt`。\n\n``` js\nconst Koa = require('koa');\nconst Router = require('koa-router');\nconst bodyParser = require('koa-bodyparser');\nconst { sign } = require('jsonwebtoken');\nconst { secret } = require('./config');\nconst jwt = require('koa-jwt')({ secret });\nconst app = new Koa();\nconst router = new Router();\nconst detail = new Router();\napp.use(bodyParser());\n\nrouter\n  .post('/api/login', async (ctx, next) => {\n    const user = ctx.request.body;\n    if (user && user.username) {\n      let { username } = user;\n      const token = sign({ username }, secret, { expiresIn: '1h' });\n      ctx.body = {\n        message: 'Get Token Success',\n        code: 1,\n        token\n      };\n    } else {\n      ctx.body = {\n        message: 'Param Error',\n        code: -1\n      };\n    }\n  })\n  .get('/api/userInfo', jwt, async ctx => {\n    ctx.body = {\n      username: ctx.state.user.username\n    };\n  })\n  .get('/api/adminInfo', jwt, admin, async ctx => {\n    ctx.body = {\n      username: ctx.state.user.username\n    };\n\n\napp.use(router.routes()).use(router.allowedMethods());\napp.listen(3000, () => {\n  console.log('app listening 3000...');\n});\n```\n\nmiddleware/admin\n\n``` js\nmodule.exports = () => {\n  return async (ctx, next) => {\n    if (ctx.state.user.username === 'admin') {\n      next()\n    } else {\n      ctx.body = {\n        code: -1,\n        message: 'Authentication Error'\n      }\n    }\n  }\n}\n```\n\n## 4 HTTP\n\n### URI 和 URL\n\n- URI: Uniform Resource Identifier (统一资源标识符)\n- URL: Uniform Resource Locator (统一资源定位符〉\n\nURL 是 URI的一个子集\n\n一个完整的 URL 一般由7个部分组成，如下所示:\n\n`scheme: [// [user [:password]@] host[:port]] [/path] [?query] [#fragment]`\n\n- scheme:使用的协议，如 FTP (File Transfer Protocol)、 HTTP 等 。\n- user[:password]: 表示访问资源的用户名和密码，常见于 FTP 协议中 。\n- host:主机，如 IP 地址或域名。\n- port:端口号，如 HTTP 默认为 80 端口 。\n- path:访问资源的路径。\n- query: 请求数据，以“?”开头。\n- fragment: 定位锚点，以“#”开头，可用于快速定位网页对应的段落。\n\n### 常用的 HTTP 状态码\n\nHTTP 状态码主要包括 1** (消息)、 2**(成功)、 3**(重定向)、 4**(请求错误〉、 5** 和 6** (服务器错误)\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/http/http.statuscode.png)\n\n### 常用的请求方法\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/http/http.request.png)\n\n### 常用的 HTTP 首部字段\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/http/http.header.png)\n\n## 5 构建 Koa Web 应用\n\nMVC 全名是 Model View Controller，即模型、视图、 控制器。\n\n- Model: 负责数据访问\n- Controller: 负责处理消息\n- View: 负责显示数据\n\n三层架构( 3-TierArchitecture )是一个分层式的架构设计理念，如有必要，也可以分为多层。\n\n分层的设计理念契合了“高内聚低藕合” 的思想，在软件体系架构设计中是最常见、也是最重要的一种结构。\n\n通常意义上的三层架构是将整个业务应用划分为 界面层( User Interface Layer)、业务逻辑层( Business Logic Layer)、数据访问层( Data Access Layer)\n\n### 在 Koa 中实现 MVC\n\n#### 分离Router\n\n路由部分的代码可以分离成独立的文件，并根据项目结构放置在适当的位置，方便管理。本示例中，将路由部分的代码独立在 router.js文件中，并置于项目根目录下\n\n``` js\n|-- app.js\n|-- router.js\n```\n\nrouter.js\n\n``` js\nconst router = require('koa-router')();\nconst HomeController = require('./controller/home');\nmodule.exports = (app) => {\n  router.get('/', HomeController.index);\n  router.get('/home', HomeController.home);\n  router.get('/home/:id/:name', HomeController.homeParams);\n  router.get('/user', HomeController.login);\n  router.post('/user/register', HomeController.register);\n  app.use(router.routes()).use(router.allowedMethods());\n}\n```\n\napp.js\n\n``` js\nconst Koa = require('koa');\nconst bodyParser = require('koa-bodyparser');\nconst app = new Koa();\nconst router = require('./router');\napp.use(bodyParser());\nrouter(app);\napp.listen(3000, () => {\n    console.log('server is running at http://localhost:3000');\n});\n```\n\n#### 分离 controller\n\ncontroller 负责存放响应 HTPP 请求的业务逻辑代码\n\ncontroller/home.js\n\n``` js\nconst HomeService = require('../service/home');\nmodule.exports = {\n    index: async (ctx, next) => {\n        ctx.response.body = `<h1>index page</h1>`;\n    },\n    home: async (ctx, next) => {\n        console.log(ctx.request.query);\n        console.log(ctx.request.querystring);\n        ctx.response.body = '<h1>HOME page</h1>';\n    },\n    homeParams: async (ctx, next) => {\n        console.log(ctx.params);\n        ctx.response.body = '<h1>HOME page /:id/:name</h1>';\n    },\n    login: async (ctx, next) => {\n        ctx.response.body = `<form action=\"/user/register\" method=\"post\">\n              <input name=\"name\" type=\"text\" placeholder=\"请输入用户名：ikcamp\"/> \n              <br/>\n              <input name=\"password\" type=\"text\" placeholder=\"请输入密码：123456\"/>\n              <br/> \n              <button>GoGoGo</button>\n            </form>`;\n    },\n    register: async (ctx, next) => {\n        let {name,password} = ctx.request.body;\n        let data = await HomeService.register(name, password);\n        ctx.response.body = data;\n\n    }\n}\n```\n\n业务层的代码分离成功之后，需要修改 router.js文件，在文件中引入 controller/home.js, 并以 home.js 中的函数作为 HTTP 请求的响应函数\n\n**注意: 上面的router.js代码是分离后的**\n\n在实际开发中，有时 Node.js 需要进行一些数据访问层的操作，如操作数据库、调用第三方接口获取数据等，因此需要分离出 Service 层来进行相应处理 。相应地，Controller 只需要进行业务逻辑部分的处理即可。\n\n#### 分离 Service\n\nservice/home.js\n\n``` js\nmodule.exports = {\n    register: async (name, pwd) => {\n        let data;\n        if (name == 'ikcamp' && pwd == '123456') {\n            data = `Hello， ${name}！`;\n        } else {\n            data = '账号信息错误';\n        }\n        return data;\n    }\n}\n```\n\n**注意: 上面的 controller/home.js 代码也是分离后的**\n\n至此，项目代码已经完成了基本的结构分离，得到的模块包括单独处理 HTTP 请求的路由文件 router.js、对 HTTP 请求进行响应的 Controller 文件，以及为 Controller 提供 Model 数据的 Service 文件。\n\n### 模板引擎\n\n目前，可以在 Node.js 中应用且比较成熟的模板引擎有很多，例如 EJS、 Jade (现己改 名为 Pug)、 Handlebars、 Nunjucks、 Swig等\n\n根据自己的需求选择合适的模板引擎\n\n`koa-views`\n\n### 静态资源\n\n在访问站点时，浏览器会接收到各种资源，常见的有 HTML、 JavaScript脚本文件、 css 样式表、 GIF 图片资源和 Flash\n\n那么浏览器是通过什么方式区分不同的资源类型， 又是如何决定以什么形式来显示的呢?\n\n答案是根据 MIMEType，也就是该资源的媒体类型。\n\n![](https://raw.githubusercontent.com/alex6liu/blog-images/master/http/mime-type.png)\n\n`koa-static`\n\n### 其他常用开发技巧\n\n#### `koa-json`\n\n#### 使用 koa-multer 中间件实现文件上传\n\n**注意: Multer 不会处理任何非 multipart/form-data 类型的表单数据**\n\n``` js\ncanst koa = require('koa');\nconst multer = require ( 'koa-multer' );\nconst app = koa();\napp.use(multer({dest : './uploads/'}));\napp.listen(3000) ;\n```\n\n## 6 数据库\n\n### 在Koa中应用MySQL数据库\n\n在 Node.js 中， 一般采用 Sequelize 这个 ORM 类库来操作数据库。 Sequelize 支持多种数据库，如 PostgreSQL、 MySQL、 SQLite和 MSSQL。\n\n`npm install sequelize -save`\n\n``` js\nconst Sequelize = require('sequelize');\nconst sequelize = new Sequelize('databaseName'，'userName勺' 'password'，{\n  host : 'localhost',\n  dialect : 'mysql'\n}};\nsequelize.authenticate().then (()=>{\n  console.log('Connected');\n  }).catch(err=>{\n    console.error ('Connect failed');\n  });\n```\n\n提示:由于建立数据库连接存在成本，所以通常情况下会通过连接池来提升数据库的连接效率，以避免每次执行数据库操作时重复建立连接。Sequelize默认支持连接池，可以在创建连接时指定 pool 参数来修改默认的连接池设置。\n\n通过 Sequelize，我们可以直接定义数据模型来创建数据表，而不必去数据库中使用 SQL 脚本创建。可以通过 define 方法定义模型\n\n``` js\nconst Categoty = sequelize.define('category', {\n  id : Sequelize.UUID,\n  name: Sequelize.STRING\n})\n\nconst Project = sequelize.define('project',{ // 定义Project模型\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    unique : true\n  },\n  date: {\n    type : Sequelize.DATE,\n    defaultValue: Sequelize.NOW\n})\n```\n\nSequelize 会默认为创建的数据表自动创建 createdAt 和 updatedAt 字段。同时，Sequelize 也提供了配置项来禁用或修改这些字段\n\n在定义模型时，也可以为字段定义 Getter和 Setter， 定义写入数据的规则\n\n``` js\nconst Custom = sequelize.define('custom', {\n  name: {\n    type : Sequelize .STRING,\n    get () { //定义 Getter，可以自定义获取数据\n      const title = this.getDataValue('title');\n      return `${this.getDataValue('name')} (${title})`\n    }\n  }\n  title : {\n    title : Sequelize.STRING,\n    set (val) { //定义 Setter，可以在写入数据前处理数据\n      this.setDataValue('title', val.toUpperCase())\n    }\n  }\n}\n```\n\n#### 同步\n\n可以通过 sync 方法将定义的模型同步到数据库中。既可以同步单个表，也可以同步全部表 \n\n``` js\nsequelize.sync().then(() => { //同步全部模型\n  // done\n}).catch(error => {\n  // some error thrown\n})\nProduct.sync() //同步单个数据表\nProject.sync({ force: true }) //强制同步，当数据库中已经存在表时，清除已经存在的表\n```\n\n#### 查询\n\n``` js\nawait Product.findAll(); // 查出 Product表中的所有数据\n\nawait Project.findAll({ // 查询 name和 date字段\n  attributes: ['name', 'date']\n})\n```\n\n``` js\nconst { Op } = require( 'sequelize' );\nawait Project.findAll({\n  where: {\n    name: {\n      [Op.like]: 't%' //查询操作为like，值为以 t开头\n    }\n  }\n})\n```\n\n### 在 Koa 中应用 MongoDB 数据库\n\n在开发 Node.js 应用时， 一般借助 Mongoose 类库来访问数据库\n\n### 在Koa中应用Redis数据库\n\n`npm install redis -save`\n\n## 7 单元测试\n\n## 8 优化与部署\n\n### 日志\n\n`npm install log4js -save`\n\n根据日志的用途， 一般可以将日志分为访问日志和应用日志\n\n应用日志包括 debug、 info、 warn 和 error 等不同级别\n\n### 部署\n\n`npm install pm2@lastst -g`\n\n","tags":["koa","nodejs","笔记"]},{"title":"前端体系目录","url":"/2019/04/25/总结/前端体系目录/","content":"\n## 1、HTML/HTML5基础：\n1.0、语义化H5标签\n1.1、H5引进了一些新的标签，特别注意article、header、footer、aside、nav等，注意HTML的标题结构\n1.2、理解浏览器解析HTML的过程，理解DOM的树形结构，及相应API\n1.3、理解HTML标签在各个浏览器上的默认样式（代理样式），理解CSS中的重置样式表的概念\n1.4、理解Canvas、SVG、video等功能性标签\n1.5、理解form、iframe标签，理解文件提交过程\n推荐书籍：\nA、《HTML5秘籍》\n\n## 2、高健壮性CSS\n2.1、学习基础知识，包括大部分常用属性、选择器的用法，要对大多数标签有个基础概念,在日常使用的基础上，尝试学习浏览器兼容性问题，要知道兼容性的主要问题及解决方法\n2.2、深入理解盒子模型，区分块级元素、行内元素，有几个比较重要的属性：display、float、position，一定要弄清楚区分盒子、行内盒子的概念另外可以考虑学一些预编译语言：sass、less，都很简单\n2.3、学习常用框架，可以使用bootstrap构建项目\n2.4、学习框架的代码组织方式包括：12格栅系统、组件化、组件的风格化等\n2.5、学习CSS 3的新功能，特别是动画效果、选择器\n2.6、认真学习一些CSS对象化思想，学习编写简洁性、高复用性、高健壮性的CSS\n2.7、有空的话，可以看看所谓的扁平化设计，还有简洁性\n2.8、理解CSSOM、render、reflow、CSS性能、CSS阻塞概念\n学习方法：\n1、多看别人的代码，一些设计的不错的网站就是很好的学习素材，比如拉勾网\n2、一定要学会使用grunt、gulp压缩CSS\n3、display + position + float 可以组合出很复杂的效果，多想想盒子模型\n4、尝试在不用float，且position不为absolute的情况下实现等高、等宽等布局\n推荐书籍：\n1、《图灵程序设计丛书:HTML5与CSS3设计模式》\n2、《Web开发技术丛书:深入理解Bootstrap》\n3、《高流量网站CSS开发技术》\n4、《CSS设计彻底研究》 这个一定要\n5、《Web开发技术丛书:深入理解Bootstrap》\n6、可以找一些专门讲SASS的书，但是我没找到\n7、《CSS权威指南(第3版)》\n\n## 3、深入学习JS\n3.1、重新学习JS语法，注意：表达式（特别是函数访问表达式）、语句、类型（包括类型判断)注意，这个时候主要倾向于“原生”JS哦，不要使用框架\n3.2、深入理解JS的“一级函数”、对象、类的概念,学会使用函数来构造类、闭包，学会用面向对象的方式组织代码\n3.3、深入理解JS的作用域、作用域链、this对象（在各种调用形式中，this的指向）理解函数的各种调用方法（call、apply、bind等）\n3.4、理解对象、数组的概念\n理解对象的“[]”调用，理解对象是一种“特殊数组”\n理解for语句的用法\n深入理解JS中原始值、包装对象的概念（重要）\n3.5、学习一些常用框架的使用方法，包括：JQUERY、underscore、EXTJS，加分点有：backbone、angularjs、ejs、jade\n通过比较多个框架的使用方法，想清楚“JS语言极其灵活”这一事实\n总结常见用法，提高学习速度\n学习模块化开发（使用require.js、sea.js等）\n3.6、适当看一些著名框架的源码，比如jQuery（不建议看angularjs，太复杂了）\n重要的是学习框架中代码的组织形式，即设计模式\n3.7、了解JS解释、运行过程，理解JS的单线程概念\n深入理解JS事件、异步、阻塞概念\n3.8、理解浏览器组成部件，理解V8的概念\n学习V8的解释-运行过程\n在V8基础上，学会如何提高JS性能\n学会使用chrome的profile进行内存泄露分析\n学习方法：\n1、提高对自己的要求，要有代码洁癖\n2、适当的时候看看优秀框架的源码，特别是框架的架构模式、设计模式\n3、多学学设计模式\n4、学习原生JS、DOM、BOM、Ajax\n推荐书籍：\n1、《O’Reilly精品图书系列:​JavaScript权威指南(​第6版)》 必看\n2、《JavaScript设计模式》\n3、《WebKit技术内幕》\n4、《JavaScript框架高级编​程:应用Prototype YUI Ext JS Dojo MooTools》\n5、《用AngularJS开发下一代Web应用》\n6、跨终端\n6.1、理解混合APP的概念\n6.2、理解网页在各类终端上的表现\n6.3、理解网页与原生app的区同，重在约束\n6.4、理解单页网站，特别要规避页面的内存泄露问题\n6.5、入门nodejs，对其有个基础概念，知道它能做什么，缺点是什么\n推荐书籍：\n1、《单页Web应用:JavaScript从前端到后端 》\n2、《Web 2.0界面设计模式》\n3、《响应式Web设计:HTML5和​CSS3实战》\n5、工具\n学会使用grunt进行JS、CSS、HTML 压缩，特别是模块化js开发时候的压缩\n会用PS进行切图、保存icon\n入手sublime、webstorm\n学会使用chrome调试面板，特别是：console、network、profile、element\n\n进阶：\n\n## 4、性能\n1.1、理解资源加载的过程\n包括：TCP握手连接、HTTP请求报文、HTTP回复报文\n1.2、理解资源加载的性能约束，包括：TCP连接限制、TCP慢启动\n1.3、理解CSS文件、JS文件压缩，理解不同文件放在页面不同位置后对性能的影响\n1.4、理解CDN加速\n1.5、学会使用HTTP头控制资源缓存，理解cache-control、expire、max-age、ETag对缓存的影响\n1.6、深入理解浏览器的render过程\n推荐书籍：\n1、《Web性能权威指南》\n2、雅虎网站页面性能优化的34条黄金守则\n\n## 5、HTTP及TCP协议族\n2.1、学习http协议，理解http请求-响应模式\n2.2、理解http是应用层协议，它是构建在TCP/IP协议上的\n2.3、理解http报文（请求-响应报文）\n2.4、理解http代理、缓存、网关等概念，指定如何控制缓存\n2.5、理解http协议内容，包括：状态码、http头、长连接（http1.1）\n2.6、学习http服务器的工作模型，对静态文件、CGI、DHTML的处理流程有个大致概念\n推荐书籍：\n1、《HTTP权威指南》\n2、《TCP/IP详解》\n3、《图解TCP/IP(第5版)》\n\n## 6、安全性\n\n","tags":["前端"]},{"title":"前端进阶书籍","url":"/2019/04/25/总结/前端进阶书籍/","content":"\n[Link](https://github.com/qiu-deqing/FE-learning)\n\n## 网络\n\n[ ] 图解http\n[ ] HTTP权威指南\n[ ] 图解tcp/ip\n\n## 性能\n\n[ ] Web性能权威指南\n[ ] 雅虎网站页面性能优化的34条黄金守则\n[ ] 高性能网站建设指南\n\n## Javascript\n\n[ ] JavaScript权威指南\n[ ] JavaScript高级程序设计\n[ ] JavaScript DOM编程艺术\n[ ] 深入理解ES6\n[ ] javaScript 忍者秘籍\n\n## css\n\n[ ] CSS权威指南\n[ ] CSS 揭秘\n\n## 架构\n\n[ ] 大型网站技术架构\n[ ] Head First设计模式\n[ ] 设计模式\n\n## UI/UX\n\n[ ] 点石成金\n\n## 前端框架\n\n[ ] 深入React技术栈\n[ ] React 进阶之路\n[ ] React状态管理与同构实战\n[ ] vue.js 权威指南\n[ ] Vue.js实战\n\n## node及后端框架\n\n[ ] 深入浅出Node.js\n[ ] Node.js开发指南\n[ ] koa和node.js开发实战\n[ ] express\n\n## 资深!!!\n\n[ ] 人月神话\n[ ] 算法导论\n[ ] 操作系统\n[ ] 编译原理\n[ ] 计算机网络原理\n[ ] 计算机程序设计的艺术","tags":["前端","书"]},{"title":"What technical details should a programmer of a web application consider before making the site public?","url":"/2019/04/25/总结/What-technical-details-should-a-programmer-of-a-web-application-consider-before-making-the-site-public/","content":"\n# What technical details should a programmer of a web application consider before making the site public?\n\n[来源](https://softwareengineering.stackexchange.com/questions/46716/what-technical-details-should-a-programmer-of-a-web-application-consider-before)\n\nThe idea here is that most of us should already know most of what is on this list. But there just might be one or two items you haven't really looked into before, don't fully understand, or maybe never even heard of.\n\n## Interface and User Experience\n\n- Be aware that browsers implement standards inconsistently and make sure your site works reasonably well across all major browsers. At a minimum test against a recent Gecko engine (Firefox), a WebKit engine (Safari and some mobile browsers), Chrome, your supported IE browsers (take advantage of the Application Compatibility VPC Images), and Opera. Also consider how browsers render your site in different operating systems.\n\n- Consider how people might use the site other than from the major browsers: cell phones, screen readers and search engines, for example. — Some accessibility info: WAI and Section508, Mobile development: MobiForge.\n\n- Staging: How to deploy updates without affecting your users. Have one or more test or staging environments available to implement changes to architecture, code or sweeping content and ensure that they can be deployed in a controlled way without breaking anything. Have an automated way of then deploying approved changes to the live site. This is most effectively implemented in conjunction with the use of a version control system (git, Subversion, etc.) and an automated build mechanism (Ant, NAnt, etc.).\n\n- Don't display unfriendly errors directly to the user.\n\n- Don't put users' email addresses in plain text as they will get spammed to death.\n\n- Add the attribute rel=\"nofollow\" to user-generated links to avoid spam.\n\n- Build well-considered limits into your site - This also belongs under Security.\n\n- Learn how to do progressive enhancement.\n\n- Redirect after a POST if that POST was successful, to prevent a refresh from submitting again.\n\n- Don't forget to take accessibility into account. It's always a good idea and in certain circumstances it's a legal requirement. WAI-ARIA and WCAG 2 are good resources in this area.\n\n- Read Don't Make Me Think.\n\n## Security\n\n- It's a lot to digest but the OWASP development guide covers Web Site security from top to bottom.\nKnow about Injection especially SQL injection and how to prevent it.\n\n- Never trust user input, nor anything else that comes in the request (which includes cookies and hidden form field values!).\n\n- Hash passwords using salt and use different salts for your rows to prevent rainbow attacks. Use a slow hashing algorithm, such as bcrypt (time tested) or scrypt (even stronger, but newer) (1, 2), for storing passwords. (How To Safely Store A Password). The NIST also approves of PBKDF2 to hash passwords\", and it's FIPS approved in .NET (more info here). Avoid using MD5 or SHA family directly.\n\n- Don't try to come up with your own fancy authentication system. It's such an easy thing to get wrong in subtle and untestable ways and you wouldn't even know it until after you're hacked.\n\n- Know the rules for processing credit cards. (See this question as well)\nUse SSL/TLS/HTTPS for any sites where sensitive data is entered (like credentials, Personally Identifiable Information, credit card info). Let's Encrypt is a free certificate authority which can help.\n\n- Prevent session hijacking.\n\n- Avoid cross site scripting (XSS).\n\n- Avoid cross site request forgeries (CSRF).\n\n- Avoid Clickjacking.\n\n- Keep your system(s) up to date with the latest patches.\n\n- Make sure your database connection information is secured.\n\n- Keep yourself informed about the latest attack techniques and vulnerabilities affecting your platform.\n\n- Read The Google Browser Security Handbook.\n\n- Read The Web Application Hacker's Handbook.\n\n- Consider The principle of least privilege. Try to run your app server as non-root. (tomcat example)\nPut rel=\"noopener noreferrer\" on all user-provided links with target=\"_blank\" to prevent JavaScript on the destination page from redirecting your page to somewhere else, such as a fake login page. More Info\nConsider using a strict Content Security Policy.\n\n## Performance\n\n- Implement caching if necessary, understand and use HTTP caching properly as well as HTML5 Manifest.\n\n- Optimize images - don't use a 20 KB image for a repeating background.\n\n- Compress content for speed, see brotli, gzip/deflate (deflate is better).\n\n- Combine/concatenate multiple stylesheets or multiple script files to reduce the number of browser connections and improve gzip ability to compress duplications between files.\n\n- Take a look at the Yahoo Exceptional Performance site, lots of great guidelines, including improving front-end performance and their YSlow tool (requires Firefox, Safari, Chrome or Opera). Also, Google page speed (use with browser extension) is another tool for performance profiling, and it optimizes your images too.\n\n- Use CSS Image Sprites for small related images like toolbars (see the \"minimize HTTP requests\" point)\n- Use SVG image sprites for small related images like toolbars. SVG coloring is bit tricky. You can read about it here.\n\n- Busy web sites should consider splitting components across domains. Specifically...\n\n- Static content (i.e. images, CSS, JavaScript, and generally content that doesn't need access to cookies) should go in a separate domain that does not use cookies, because all cookies for a domain and its subdomains are sent with every request to the domain and its subdomains. One good option here is to use a Content Delivery Network (CDN), but consider the case where that CDN may fail by including alternative CDNs, or local copies that can be served instead.\nMinimize the total number of HTTP requests required for a browser to render the page.\n\n- Choose a template engine and render/pre-compile it using task-runners like gulp or grunt\n\n- Make sure there’s a favicon.ico file in the root of the site, i.e. /favicon.ico. Browsers will automatically request it, even if the icon isn’t mentioned in the HTML at all. If you don’t have a /favicon.ico, this will result in a lot of 404s, draining your server’s bandwidth.\n\n## SEO (Search Engine Optimization)\n\n- Use \"search engine friendly\" URLs, i.e. use example.com/pages/45-article-title instead of example.com/index.php?page=45\n- When using # for dynamic content change the # to #! and then on the server $_REQUEST[\"_escaped_fragment_\"] is what googlebot uses instead of #!. In other words, ./#!page=1 becomes ./?_escaped_fragments_=page=1. Also, for users that may be using FF.b4 or Chromium, history.pushState({\"foo\":\"bar\"}, \"About\", \"./?page=1\"); Is a great command. So even though the address bar has changed the page does not reload. This allows you to use ? instead of #! to keep dynamic content and also tell the server when you email the link that we are after this page, and the AJAX does not need to make another extra request.\n- Don't use links that say \"click here\". You're wasting an SEO opportunity and it makes things harder for people with screen readers.\n- Have an XML sitemap, preferably in the default location /sitemap.xml.\n- Use <link rel=\"canonical\" ... /> when you have multiple URLs that point to the same content, this issue can also be addressed from Google Webmaster Tools.\n- Use Google Webmaster Tools and Bing Webmaster Tools.\n- Install Google Analytics right at the start (or an open source analysis tool like Piwik).\n- Know how robots.txt and search engine spiders work.\n- Redirect requests (using 301 Moved Permanently) asking for www.example.com to example.com (or the other way round) to prevent splitting the google ranking between both sites.\n- Know that there can be badly-behaved spiders out there.\n- If you have non-text content look into Google's sitemap extensions for video etc. There is some good information about this in Tim Farley's answer.\n\n## Technology\n\n- Understand HTTP and things like GET, POST, sessions, cookies, and what it means to be \"stateless\".\n- Write your XHTML/HTML and CSS according to the W3C specifications and make sure they validate. The goal here is to avoid browser quirks modes and as a bonus make it much easier to work with non-traditional browsers like screen readers and mobile devices.\n- Understand how JavaScript is processed in the browser.\n- Understand how JavaScript, style sheets, and other resources used by your page are loaded and consider their impact on perceived performance. It is now widely regarded as appropriate to move scripts to the bottom of your pages with exceptions typically being things like analytics apps or HTML5 shims.\n- Understand how the JavaScript sandbox works, especially if you intend to use iframes.\n- Be aware that JavaScript can and will be disabled, and that AJAX is therefore an extension, not a baseline. Even if most normal users leave it on now, remember that NoScript is becoming more popular, mobile devices may not work as expected, and Google won't run most of your JavaScript when indexing the site.\n- Learn the difference between 301 and 302 redirects (this is also an SEO issue).\n- Learn as much as you possibly can about your deployment platform.\n- Consider using a Reset Style Sheet or normalize.css.\n- Consider JavaScript frameworks (such as jQuery, MooTools, Prototype, Dojo or YUI 3), which will hide a lot of the browser differences when using JavaScript for DOM manipulation.\n- Taking perceived performance and JS frameworks together, consider using a service such as the Google Libraries API to load frameworks so that a browser can use a copy of the framework it has already cached rather than downloading a duplicate copy from your site.\n- Don't reinvent the wheel. Before doing ANYTHING search for a component or example on how to do it. There is a 99% chance that someone has done it and released an OSS version of the code.\n- On the flipside of that, don't start with 20 libraries before you've even decided what your needs are. Particularly on the client-side web where it's almost always ultimately more important to keep things lightweight, fast, and flexible.\n\n## Bug fixing\n\n- Understand you'll spend 20% of your time coding and 80% of it maintaining, so code accordingly.\n- Set up a good error reporting solution.\n- Have a system for people to contact you with suggestions and criticisms.\n- Document how the application works for future support staff and people performing maintenance.\n- Make frequent backups! (And make sure those backups are functional) Have a restore strategy, not just a backup strategy.\n- Use a version control system to store your files, such as Subversion, Mercurial or Git.\n- Don't forget to do your Acceptance Testing. Frameworks like Selenium can help. Especially if you fully automate your testing, perhaps by using a Continuous Integration tool, such as Jenkins.\n- Make sure you have sufficient logging in place using frameworks such as log4j, log4net or log4r. If something goes wrong on your live site, you'll need a way of finding out what.\n- When logging make sure you capture both handled exceptions, and unhandled exceptions. Report/analyse the log output, as it'll show you where the key issues are in your site.\n\n## Other\n\n- Implement both server-side and client-side monitoring and analytics (one should be proactive rather than reactive).\n- Use services like UserVoice and Intercom (or any other similar tools) to constantly keep in touch with your users.\n- Follow Vincent Driessen's Git branching model\n\nLots of stuff omitted not necessarily because they're not useful answers, but because they're either too detailed, out of scope, or go a bit too far for someone looking to get an overview of the things they should know. Please feel free to edit this as well, I probably missed some stuff or made some mistakes.","tags":["web应用"]},{"title":"cookie和session的区别","url":"/2019/04/25/网络/cookie和session的区别/","content":"\n# cookie和session的区别\n\n1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。\n\n所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。\n\n----\n\n1. session 在服务器端，cookie 在客户端（浏览器）\n2. session 默认被存在在服务器的一个文件里（不是内存）\n3. session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）\n4. session 可以放在 文件、数据库、或内存中都可以。\n5. 用户验证这种场合一般会用 session\n\n----\n","tags":["cookie","session"]},{"title":"发送短信","url":"/2019/04/22/总结/发送短信/","content":"\n# 发送短信\n\n安装MD5\n\n``` js\nnpm i md5\n```\n\n使用\n\n``` js\nconst timestamp = Date.parse(new Date()) / 1000\nconst nonce = this.generateCode()\nconst originString = this.platform.jscode + timestamp + nonce + this.state.phoneNumber\nconst sign = md5(originString)\n\nconst self = this\nself\n  .am('sms', {\n    mobile: this.state.phoneNumber,\n    // jscode: this.state.jscode,\n    timestamp,\n    nonce,\n    sign\n  })\n\n// 生成6位随机数字\ngenerateCode() {\n  let arr = []\n  for(let i = 0; i < 6; i++){\n    let num = Math.random() * 9\n    num = parseInt(num, 10)\n    arr.push(num);\n  }\n  return arr.join('')\n}\n```","tags":["短信"]},{"title":"koa学习","url":"/2019/04/22/koa/koa学习/","content":"\n# koa 学习\n\n## 洋葱模型\n\n![](https://camo.githubusercontent.com/d80cf3b511ef4898bcde9a464de491fa15a50d06/68747470733a2f2f7261772e6769746875622e636f6d2f66656e676d6b322f6b6f612d67756964652f6d61737465722f6f6e696f6e2e706e67)\n\n## Middleware\n\n### Router\n\n`koa-router`\n\n[link](https://github.com/ZijianHe/koa-router)\n\n#### 安装\n\n`npm install koa-router`\n\n#### Basic Usage\n\n``` js\nvar Koa = require('koa');\nvar Router = require('koa-router');\n\nvar app = new Koa();\nvar router = new Router();\n\nrouter.get('/', (ctx, next) => {\n  // ctx.router available\n});\n\napp\n  .use(router.routes())\n  .use(router.allowedMethods());\n```\n\nAdditionaly, `router.all()` can be used to match against all methods.\n\n#### 动态路由\n\n```js\nrouter.get('/:id', (ctx, next) => {\n  console.log(ctx.params)\n});\n```\n\n#### url传值\n\n```js\nrouter.get('/news', (ctx, next) => {\n  console.log(ctx.query) // -> 推荐\n  console.log(ctx.querystring)\n  console.log(ctx.url)\n  console.log(ctx.request.url)\n  console.log(ctx.request.query)\n});\n```\n\n#### 公共数据\n\n``` js\napp.use(async function (ctx) {\n  ctx.state = {\n    session: this.session,\n    title: 'app'\n  };\n});\n```\n\n### ejs模板引擎\n\n#### 安装\n\n`npm i ejs koa-views`\n\n#### Usage\n\n``` js\nconst views = require('koa-views');\nconst path = require('path');\n\napp.use(views(path.join(__dirname, '../views'), {\n  extension: 'ejs'\n}))\n\n// app.use(views('views', { extension: 'ejs' })) // 后缀名ejs\n// app.use(views('views', { map: {html: 'ejs' }})) // 后缀名html\n\n// 在views文件夹下新建index.ejs\napp.use(async function (ctx) {\n  await ctx.render('index', {\n    title: 'hello'\n  });\n});\n```\n\n#### ejs语法\n\n##### 数据绑定\n\n`<%= title %>`\n\n##### for循环\n\nlist是绑定的数据\n\n``` js\n<% for(let i; i< list.length: i++) { %>\n  <%= list[i] %>\n<% } %>\n```\n\n##### 引入模板\n\n``` js\n// public/header.ejs\n<h2>Header</h2>\n```\n\n`<% include public/header.ejs %>`\n\n##### 绑定html数据\n\n`<%- html %>`\n\n### 获取post提交的数据\n\n#### 原生\n\n``` js\napp.use( async ( ctx ) => {\n\n  if ( ctx.url === '/' && ctx.method === 'GET' ) {\n    // 当GET请求时候返回表单页面\n    let html = `\n      <h1>koa2 request post demo</h1>\n      <form method=\"POST\" action=\"/\">\n        <p>userName</p>\n        <input name=\"userName\" /><br/>\n        <p>nickName</p>\n        <input name=\"nickName\" /><br/>\n        <p>email</p>\n        <input name=\"email\" /><br/>\n        <button type=\"submit\">submit</button>\n      </form>\n    `\n    ctx.body = html\n  } else if ( ctx.url === '/' && ctx.method === 'POST' ) {\n    // 当POST请求的时候，解析POST表单里的数据，并显示出来\n    let postData = await parsePostData( ctx )\n    ctx.body = postData\n  } else {\n    // 其他请求显示404\n    ctx.body = '<h1>404！！！ o(╯□╰)o</h1>'\n  }\n\n// 解析上下文里node原生请求的POST参数\nfunction parsePostData( ctx ) {\n  return new Promise((resolve, reject) => {\n    try {\n      let postdata = \"\";\n      ctx.req.addListener('data', (data) => {\n        postdata += data\n      })\n      ctx.req.addListener(\"end\",function(){\n        let parseData = parseQueryStr( postdata )\n        resolve( parseData )\n      })\n    } catch ( err ) {\n      reject(err)\n    }\n  })\n}\n\n// 将POST请求参数字符串解析成JSON\nfunction parseQueryStr( queryStr ) {\n  let queryData = {}\n  let queryStrList = queryStr.split('&')\n  console.log( queryStrList )\n  for (  let [ index, queryStr ] of queryStrList.entries()  ) {\n    let itemList = queryStr.split('=')\n    queryData[ itemList[0] ] = decodeURIComponent(itemList[1])\n  }\n  return queryData\n}\n```\n\n#### koa-bodyparser中间件\n\n`npm i koa-bodyparser`\n\n``` js\nconst bodyParser = require('koa-bodyparser')\n\n// 使用ctx.body解析中间件\napp.use(bodyParser())\n\napp.use( async ( ctx ) => {\n\n  if ( ctx.url === '/' && ctx.method === 'GET' ) {\n    // 当GET请求时候返回表单页面\n    let html = `\n      <h1>koa2 request post demo</h1>\n      <form method=\"POST\" action=\"/\">\n        <p>userName</p>\n        <input name=\"userName\" /><br/>\n        <p>nickName</p>\n        <input name=\"nickName\" /><br/>\n        <p>email</p>\n        <input name=\"email\" /><br/>\n        <button type=\"submit\">submit</button>\n      </form>\n    `\n    ctx.body = html\n  } else if ( ctx.url === '/' && ctx.method === 'POST' ) {\n    // 当POST请求的时候，中间件koa-bodyparser解析POST表单里的数据，并显示出来\n    let postData = ctx.request.body // -> 就是这一句\n    ctx.body = postData\n  } else {\n    // 其他请求显示404\n    ctx.body = '<h1>404！！！ o(╯□╰)o</h1>'\n  }\n})\n```\n\n### 静态资源\n\n#### 原生\n\n[link](https://github.com/ChenShenhai/koa2-note/blob/master/note/static/server.md)\n\n#### 中间件\n\n`koa-static`\n\n``` js\nconst Koa = require('koa')\nconst path = require('path')\nconst static = require('koa-static')\n\nconst app = new Koa()\n\n// 静态资源目录对于相对入口文件index.js的路径\nconst staticPath = './static'\n\napp.use(static(\n  path.join( __dirname,  staticPath)\n))\n\n\napp.use( async ( ctx ) => {\n  ctx.body = 'hello world'\n})\n\napp.listen(3000, () => {\n  console.log('[demo] static-use-middleware is starting at port 3000')\n})\n```\n\n### art-template模板引擎\n\n- 速度极快\n- 支持ejs语法\n\n#### 安装\n\n`npm install --save art-template koa-art-template`\n\n#### Usage\n\n``` js\nconst Koa = require('koa');\nconst render = require('koa-art-template');\n\nconst app = new Koa();\nrender(app, {\n  root: path.join(__dirname, 'view'),\n  extname: '.art',\n  debug: process.env.NODE_ENV !== 'production'\n});\n\napp.use(async function (ctx) {\n  await ctx.render('user');\n});\n\napp.listen(8080);\n```\n\n#### syntax\n\n[link](https://aui.github.io/art-template/docs/syntax.html)\n\n`{{value}}`\n\n## cookie\n\n### 使用方法\n\nkoa提供了从上下文直接读取、写入cookie的方法\n\n- ctx.cookies.get(name, [options]) 读取上下文请求中的cookie\n- ctx.cookies.set(name, value, [options]) 在上下文中写入cookie\n\nkoa2 中操作的cookies是使用了npm的cookies模块，源码在[https://github.com/pillarjs/cookies](https://github.com/pillarjs/cookies)，所以在读写cookie的使用参数与该模块的使用一致。\n\n### 例子代码\n\n``` js\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use( async ( ctx ) => {\n\n  if ( ctx.url === '/index' ) {\n    ctx.cookies.set(\n      'cid',\n      'hello world',\n      {\n        domain: 'localhost',  // 写cookie所在的域名\n        path: '/index',       // 写cookie所在的路径\n        maxAge: 10 * 60 * 1000, // cookie有效时长\n        expires: new Date('2017-02-15'),  // cookie失效时间\n        httpOnly: false,  // 是否只用于http请求中获取\n        overwrite: false  // 是否允许重写\n      }\n    )\n    ctx.body = 'cookie is ok'\n  } else {\n    ctx.body = 'hello world' \n  }\n\n})\n\napp.listen(3000, () => {\n  console.log('[demo] cookie is starting at port 3000')\n})\n```\n\n## session\n\nkoa2原生功能只提供了cookie的操作，但是没有提供session操作。session就只用自己实现或者通过第三方中间件实现。在koa2中实现session的方案有一下几种\n\n- 如果session数据量很小，可以直接存在内存中\n- 如果session数据量很大，则需要存储介质存放session数据\n\n### 数据库存储方案\n\n- 将session存放在MySQL数据库中\n- 需要用到中间件\n  - koa-session-minimal 适用于koa2 的session中间件，提供存储介质的读写接口 。\n  - koa-mysql-session 为koa-session-minimal中间件提供MySQL数据库的session数据读写操作。\n  - 将sessionId和对应的数据存到数据库\n- 将数据库的存储的sessionId存到页面的cookie中\n- 根据cookie的sessionId去获取对于的session信息\n\n### 例子代码\n\n```js\nconst Koa = require('koa')\nconst session = require('koa-session-minimal')\nconst MysqlSession = require('koa-mysql-session')\n\nconst app = new Koa()\n\n// 配置存储session信息的mysql\nlet store = new MysqlSession({\n  user: 'root',\n  password: 'abc123',\n  database: 'koa_demo',\n  host: '127.0.0.1',\n})\n\n// 存放sessionId的cookie配置\nlet cookie = {\n  maxAge: '', // cookie有效时长\n  expires: '',  // cookie失效时间\n  path: '', // 写cookie所在的路径\n  domain: '', // 写cookie所在的域名\n  httpOnly: '', // 是否只用于http请求中获取\n  overwrite: '',  // 是否允许重写\n  secure: '',\n  sameSite: '',\n  signed: '',\n  \n}\n\n// 使用session中间件\napp.use(session({\n  key: 'SESSION_ID',\n  store: store,\n  cookie: cookie\n}))\n\napp.use( async ( ctx ) => {\n\n  // 设置session\n  if ( ctx.url === '/set' ) {\n    ctx.session = {\n      user_id: Math.random().toString(36).substr(2),\n      count: 0\n    }\n    ctx.body = ctx.session\n  } else if ( ctx.url === '/' ) {\n\n    // 读取session信息\n    ctx.session.count = ctx.session.count + 1\n    ctx.body = ctx.session\n  } \n  \n})\n\napp.listen(3000)\nconsole.log('[demo] session is starting at port 3000')\n```\n\n## 验证码\n\n`npm install --save svg-captcha`\n\n### Usage\n\n``` js\nvar svgCaptcha = require('svg-captcha');\n\nvar captcha = svgCaptcha.create();\nconsole.log(captcha);\n// {data: '<svg.../svg>', text: 'abcd'}\n```\n\nwith express\n\n``` js\nvar svgCaptcha = require('svg-captcha');\n\napp.get('/captcha', function (req, res) {\n\tvar captcha = svgCaptcha.create();\n\treq.session.captcha = captcha.text;\n\t\n\tres.type('svg');\n\tres.status(200).send(captcha.data);\n});\n```\n\nwith koa\n\n``` js\nconst captcha = svgCaptcha.create({\n  size: 6,\n  fontSize: 50,\n  width: 100,\n  height: 40,\n  background: '#cc9966'\n})\n\nctx.session.code = captcha.text\nctx.response.type = 'image/svg+xml'\nctx.body = captcha.data\n```","tags":["koa","nodejs"]},{"title":"解决微信小程序滚动穿透的问题","url":"/2019/04/18/总结/解决微信小程序滚动穿透的问题/","content":"\n# 解决微信小程序滚动穿透的问题\n[参考](https://blog.csdn.net/lamenw/article/details/80621549)\n\n## 方案\n\n```js\n<view class=\"modal-view\" hidden=\"{{!showModal}}\" bindtap=\"toggleModal\" catchtouchmove=\"ture\">\n  <view class=\"modal\">\n  <view class=\"modal-item\" catchtap=\"makePhoneCall\">{{site.phone}}</view>\n  <view class=\"modal-item\" catchtap=\"toggleModal\">取消</view>\n  </view>\n</view>\n```","tags":["微信小程序","滚动穿透"]},{"title":"微信小程序实现侧滑删除","url":"/2019/04/09/总结/微信小程序实现侧滑删除/","content":"# 微信小程序实现侧滑删除\n\n三种办法： scroll-view, movable-view配合movable-area, view\n\n## View\n\n删除上一行后，下一行的删除按钮会显示，这个问题在scroll-view的方法中还是存在\n\n目前就是在点击删除的时候，把删除按钮隐藏\n\n``` js\nimport {View,Button} from '@tarojs/components'\nimport { Component } from '../../lib/component'\n\nimport './sliderLeft.scss'\n\nclass SliderLeft extends Component {\n  state = {\n    style: '',\n    delBtnWidth: 100,\n    startX: 0,\n  }\n  \n  touchStart(e) {\n    if(e.touches.length==1){\n      this.setState({\n        //设置触摸起始点水平方向位置\n        startX:e.touches[0].clientX\n      });\n    }\n  }\n\n  touchEnd(e) {\n    if(e.changedTouches.length==1){\n      //手指移动结束后水平位置\n      const endX = e.changedTouches[0].clientX;\n      //触摸开始与结束，手指移动的距离\n      const disX = this.state.startX - endX;\n      const delBtnWidth = this.state.delBtnWidth;\n      //如果距离小于删除按钮的1/5，不显示删除按钮\n      const txtStyle = disX > delBtnWidth/5 ? \"left:-\"+delBtnWidth+\"rpx\":\"left:0rpx\";\n      this.setState({\n        style: txtStyle\n      })\n    }\n  }\n\n  touchMove(e) {\n    if(e.touches.length==1){\n      //手指移动时水平方向位置\n      const moveX = e.touches[0].clientX;\n      //手指起始点位置与移动期间的差值\n      const disX = this.state.startX - moveX;\n      const delBtnWidth = this.state.delBtnWidth;\n      let txtStyle = \"\";\n      if(disX <= 0){//如果移动距离小于等于0，文本层位置不变\n        txtStyle = \"left:0rpx\";\n      } else if(disX > 0 ){//移动距离大于0，文本层left值等于手指移动距离\n        txtStyle = \"left:-\"+disX+\"rpx\";\n        if(disX>=delBtnWidth){\n          //控制手指移动距离最大值为删除按钮的宽度\n          txtStyle = \"left:-\"+delBtnWidth+\"rpx\";\n        }\n      }\n      this.setState({\n        style: txtStyle\n      })\n    }\n  }\n  \n  render () {\n\n    return (\n      <View className='item-scroll' onTouchStart={this.touchStart} onTouchEnd={this.touchEnd} onTouchMove={this.touchMove} style={this.state.style}>\n        <View className='item'>\n          {this.state.checkedItems.includes(item.orderItemId) ? (\n            <View className='check' onClick={this.uncheckItem.bind(this, item.orderItemId, item.quantity)}>\n              <Image src={CheckImage} class='checkImage' mode='scaleToFill'></Image>\n            </View>\n          ) : (\n            <View className='check' onClick={this.checkItem.bind(this, item.orderItemId, item.quantity)}>\n              <View className='check-item'></View>\n            </View>\n          )}\n          <Image src={item.imageUrl} className='item-image' mode='scaleToFill'></Image>\n          <View className='item-intro'>\n            <View className='item-name'>{item.productDesc}</View>\n            <View className='item-price-quantity'>\n              <Text className='item-promotion-price'>￥{item.itemGrand}</Text>\n              {/* 加减按钮 */}\n              <View className='plus'>\n                <View className={item.quantity > 1 ? 'plus-reduce' : 'plus-reduce-disable'} onClick={this.decreaseItem.bind(this, item.orderItemId, item.quantity)}>-</View>\n                <View className='plus-content'>{item.quantity}</View>\n                <View className='plus-plus' onClick={this.increaseItem.bind(this, item.orderItemId, item.quantity)}>+</View>\n              </View>\n            </View>\n          </View>\n          {/* 删除整行 */}\n          <View className='item-del' onClick={this.clearItem.bind(this, item.orderItemId, item.quantity)}>\n            删除\n          </View>\n        </View>\n      </View>\n    )\n  }\n}\n\nexport default SliderLeft\n```","tags":["微信小程序","侧滑删除"]},{"title":"2019-04-09CSS","url":"/2019/04/09/总结/单行多行文本显示省略号/","content":"# CSS实现单行、多行文本溢出显示省略号\n\n[参考](http://www.daqianduan.com/6179.html)\n\n## 单行\n如果实现单行文本的溢出显示省略号可以用text-overflow:ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。\n\n实现方法：\n\n``` css\noverflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n```\n\n## 多行\n\n``` css\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\n```\n\n适用范围：\n因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；\n\n注：\n```\n-webkit-line-clamp 用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：\ndisplay: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n```","tags":["CSS"]},{"title":"2019-04-04项目部分功能逻辑梳理","url":"/2019/04/04/总结/2019-04-04项目部分功能逻辑梳理/","content":"# 商城项目部分逻辑梳理\n\n## 用户注册（需要获取到手机号）\n\n用户第一次登录微信小程序会有openid\n\n可以选择微信注册（老版本的微信注册可能会不需要手机号）或者手机号注册\n\n``` js\n<Button open-type='getPhoneNumber' onGetPhoneNumber={处理后续注册操作}></Button>\n```\n\n微信注册后，得到unionid\n\n## 手机注册\n\n### 手机号验证\n\n``` js\n!/^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(16[0-9]{1})|(17[0-9]{1})|(18[0-9]{1})|(19[0-9]{1}))+\\d{8})$/.test(phoneNumber)\n```\n\n### 短信验证码发送倒计时\n\n``` js\n// state = { timeCountDown: 60 }\ntimeCountDownFunc () {\n    const countdown = setInterval(() => {\n      this.setState({\n        timeCountDown: --this.state.timeCountDown\n      }, () => {\n        if (this.state.timeCountDown===0) {\n          this.setState({\n            checkCodeClicked: false,\n            timeCountDown: 60\n          })\n          clearInterval(countdown)\n        }\n      })\n    }, 1000)\n  }\n```\n\n### 短信验证码验证\n\n``` js\n!/^([0-9]{6})$/.test(checkCode)\n```\n\n### 功能检验\n\n- 判断手机号是否正确\n- 判断短信验证码是否正确\n- 判断后端返回的错误信息\n- 执行手机号注册功能\n\n## 商品加入购物车、直接购买\n\n### 功能检验\n\n- 判断商品库存\n- 判断是否是在团购、秒杀等时间内\n- 判断后端返回的错误信息\n- 执行加入购物车、立即购买功能","tags":["逻辑"]},{"title":"2019-04-04CSS总结","url":"/2019/04/04/总结/2019-04-04CSS总结/","content":"# CSS总结\n\n[CSS参考手册](http://css.doyoe.com/)\n\n## 居中三连\n\n``` css\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n```\n\n## flex-wrap的妙用\n\n四宫格什么的\n\n``` css\n  display: flex;\n  flex-wrap: wrap;\n```","tags":["css"]},{"title":"2019-04-04小程序总结","url":"/2019/04/04/总结/2019-04-04小程序总结/","content":"# 总结微信小程序项目中遇到的问题\n\n## 模拟器中日期正常显示，ios系统上显示出问题(IOS为NaN的问题)\n\n### 原因：ios系统对Date.parse()解析有限制\n\nIOS系统不支持2017-01-01格式的时间导致的，\n\n``` js\nvar mydata = '2017-01-01 11:00:00';\nconsole.log(\"返回时间：\" + mydata);\nvar time = Date.parse(new Date(mydata)) / 1000;\n```\n\n这样的代码安卓手机开发手机测试都没有问题，唯独IOS获取的日期为NaN,若干次百度调试后发现，原来IOS只识别2017/01/01这样的日期格式，\n下面用正则替换2017-01-01日期格式为2017/01/01后问题解决(代码如下)\n\n``` js\nvar mydata = '2017-01-01 11:00:00';  \nmydata=data.replace(/-/g, '/');  \nconsole.log(\"返回时间：\" + mydata);  \nvar time = Date.parse(new Date(mydata)) / 1000;\n```\n\n----------------------\n\n``` js\nvar startTime = new Date('2017-12-08 00:00:00');   //ios中starTime为NaN\n```\n\nAndroid 和 PC端浏览器都没有问题，IOS 浏览器会报NaN，解决方法就是，把中间的空格替换为T\n\n``` js\nstartTime.replace(' ','T');\nvar startTime2 = new Date('2017-12-08T00:00:00');  \n```\n\n## canvas生成海报\n\n``` js\nlet canvasImg = ''\n  await Taro.downloadFile({\n    url: prodimg\n  })\n  .then(res => {\n    canvasImg = res.tempFilePath\n\n  const context = Taro.createCanvasContext(\"imageCanvas\",this.$scope)\n  context.drawImage(canvasImg,57,10,260,260);\n  context.save();\n```\n\n### ios必须打开调试才能出现图片的问题\n\n添加图片域名到小程序的downloadFile安全域名下\n\n[参考](https://developers.weixin.qq.com/community/develop/doc/0002c0cddf05c81490a6649cf51c00)\n\n### 保存图片\n\n``` js\n  saveImage() {\n    const self = this\n    Taro.canvasToTempFilePath({\n      canvasId: 'imageCanvas',\n      fileType: 'jpg',\n      success(res) {\n        Taro.authorize({\n          scope: 'scope.writePhotosAlbum',\n          success() {\n            Taro.saveImageToPhotosAlbum({\n              filePath: res.tempFilePath,\n              success() {\n                Taro.showToast({\n                  title: '保存成功！',\n                  icon: 'none',\n                  mask: true,\n                  complete: Taro.hideLoading()\n                })\n                console.log(\"保存成功！\");\n              }\n            })\n          }\n        })\n      }\n    }, this.$scope)\n  }\n```\n\n## Button按钮去除边框\n\n```button::after{ border: none; }```","tags":["微信小程序"]}]